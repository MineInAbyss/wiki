{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Welcome to the Mine in Abyss developer docs. We keep documentation for our major projects here. Anyone interested in contributing can visit our Outline page for guides, conventions, and more!</p> <p>About Mine in Abyss I want to contribute</p>"},{"location":"#faq","title":"FAQ","text":"<p>Can I use your code in my projects?</p> <p>We try to keep everything we make open source, mostly under the very permissive MIT license which allows you to use and extend upon our plugins without asking. Be sure to read a project's license for specific details.  You can find everything on our  GitHub organization.</p> <p>What's the best way to reach out if I have questions?</p> <p>You can reach us in  <code>#plugin-dev</code> on Discord. You may need to give yourself the coding club role to view the channel.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Geary</li> <li>Geary for Minecraft</li> <li>Idofront</li> <li>Other</li> </ul>"},{"location":"coding/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Quickstart</li> <li>Learn to Code</li> <li>Conventions</li> <li>Private assets</li> <li>Dependencies</li> <li>Server management</li> <li>Resources</li> </ul>"},{"location":"coding/private-assets/","title":"Private assets","text":"<p>Let's explore how to get started with parts of the project that aren't publicly accessible. Access will be granted based on developer needs, but most of this stuff is already set up on our dev server!</p>"},{"location":"coding/private-assets/#set-up-resources-auth","title":"Set up resources auth","text":"<p>Let's explore some variables that you'll need to set up to access private resources. Pass these along into docker-compose.</p> <pre><code>KEEPUP_GITHUB_AUTH_TOKEN=&lt;auth token for keepup to not get ratelimited/download private plugins if ever needed&gt;\nPACKY_ACCESS_TOKEN=&lt;token for packy to read private repos&gt;\nPRIVATE_PLUGINS_TOKEN=&lt;reposilite token for keepup to download private plugins&gt;\n</code></pre>"},{"location":"coding/private-assets/#bbmodels","title":"BBModels","text":"<p>We serve generated BBModel files using packy, and bind a clone repo from our filesystem. With the GitHub CLI installed you can do,</p> <pre><code>cd /opt/docker/data/\ngh auth login\ngh repo clone MineInAbyss/BBModel-Files\n</code></pre> <p>Then bind the volume,</p> <pre><code>volumes:\n  - \"/opt/docker/data/BBModel-Files/blueprints:/data/plugins/ModelEngine/blueprints\"\n</code></pre>"},{"location":"coding/private-assets/#download-from-world-backup","title":"Download from world backup","text":"<p>Set up a backup remote in rclone and run the following (changing -t to your world location),</p> <pre><code>restic restore latest -r rclone:mineinabyss:build --target /opt/docker/data/minecraft/mineinabyss/world\n</code></pre>"},{"location":"coding/quickstart/","title":"Quickstart","text":"<p>Let's set up a local server and dev environment. If you're new to programming, continue with the guide on the sidebar and come back here afterward!</p> <p>Note</p> <p>If you wish to contribute with other aspects of the project, such as art, design, or building, check out mineinabyss.com/contributing.</p>"},{"location":"coding/quickstart/#ide","title":"IDE","text":"<ul> <li>Install  IntelliJ IDEA</li> <li>Install a Java 21 JDK, most easily via IntelliJ using <code>Ctrl+Alt+Shift+S</code>, then clicking the dropdown in project settings.</li> <li>Set your server plugin path in <code>~/.gradle/gradle.properties</code> (see Configuring gradle below), we also recommend some other settings for better performance.</li> <li>Build the project with gradle (see Building a project below).</li> <li>Our composite-projects repo can be useful for working on multiple projects at once, or just clone the repos you need.</li> </ul>"},{"location":"coding/quickstart/#server","title":"Server","text":"<ul> <li>Install Docker, follow  Docker's install guide.</li> <li>Create a server directory and enter it.</li> <li>Make a file named <code>docker-compose.yml</code> and paste the config from below.</li> <li>Server config and plugins will be downloaded automatically using Keepup, if you build any plugins locally, Keepup will use yours instead.</li> <li>You can create a <code>.env</code> file in the same directory to pass secrets (ex. to download our mob models)</li> </ul> Simple server <pre><code>version: \"3\"\nservices:\n  mineinabyss:\n    image: ghcr.io/mineinabyss/minecraft:master\n    container_name: mineinabyss\n    ports:\n      - \"25565:25565\"\n      - \"5005:5005\" # For debugging\n      - \"8082:8082\" # Packy server port\n    environment:\n      SERVER_NAME: \"dev\" # Defines what plugins and configs to pull, dev is a reasonable option\n      EULA: true\n      TYPE: PAPER\n      VERSION: \"1.20.4\"\n      EXEC_DIRECTLY: true\n      USE_AIKAR_FLAGS: true\n      JVM_OPTS: \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005\" # Enables live debugging\n      PACKY_PUBLIC_ADDRESS: http://localhost:8082\n      ANSIBLE_PULL_BRANCH: \"prod\" # develop may also be useful\n      # Options you can fiddle with\n      # ANSIBLE: \"false\" # Disable server config copying\n      # ANSIBLE_PULL: \"false\" # Don't pull (use local config for testing)\n      # KEEPUP: \"false\" # Disable plugin downloads\n      # KEEPUP_OVERRIDE_GITHUB_RELEASE: \"LATEST\" # Auto download latest releases/snapshots for plugins\n      # KEEPUP_JSON_PATH: \"mineinabyss.production-basic\" # Set exact plugins to pull\n    volumes:\n      # Change location as needed, relative paths are supported\n      - \"/opt/docker/data/minecraft/mineinabyss:/data\"\n      - \"/opt/docker/data/minecraft/server-config:/server-config\"\n        # Replace with the path to your local config for testing\n        # - \"~/projects/server-config:/server-config\"\n    # Allows 'docker attach' to work\n    stdin_open: true\n    tty: true\n</code></pre> <p>More environment options avialable on GitHub.</p>"},{"location":"coding/quickstart/#running-the-server","title":"Running the server","text":"<ul> <li>Install lazydocker or Docker Desktop for a GUI to manage your containers.</li> <li>Run <code>docker-compose up -d</code> in the directory of your <code>docker-compose.yml</code> to start the server in the background.</li> <li>Some IDEs like VSCode or Intellij let you manage Docker containers too, it may be convenient to open your entire minecraft folder to be able to modify the compose file and see local configs.</li> <li>Connect to <code>localhost</code> in Minecraft to join the server.</li> <li>Op yourself by attaching to your container (<code>a</code> in lazydocker) or <code>docker attach mineinabyss</code>.</li> </ul>"},{"location":"coding/quickstart/#extras","title":"Extras","text":""},{"location":"coding/quickstart/#configuring-gradle","title":"Configuring gradle","text":"<p>Gradle has a global configuration file located at <code>~/.gradle/gradle.properties</code> (<code>~</code> being your user directory). Create the file and add the lines below:</p> <pre><code>plugin_path=path/to/my/server/plugins\npaperweight.experimental.sharedCaches=true\n</code></pre> <ul> <li><code>plugin_path</code> will instruct our builds to copy the final jar into this path</li> <li><code>paperweight.experimental.sharedCaches</code> will reuse the same decompiled Minecraft server across projects, saving a lot of time</li> </ul>"},{"location":"coding/quickstart/#building-a-project","title":"Building a project","text":"<p>You do not need to install anything to build. You can do it from command line or IntelliJ (running builds through IntelliJ will be more convenient)</p>  Windows  MacOS/Linux <pre><code>cd &lt;insert project directory here&gt;\ngradlew.bat build\n</code></pre> <pre><code>cd &lt;insert project directory here&gt;\n./gradlew build\n</code></pre> IntelliJ gradle tutorial <p>This video shows how to run Gradle tasks like build, as well as how to work with Gradle in general. Feel free to watch the short clip or full video.</p> <p></p> <p>You can also find documentation here.</p>"},{"location":"coding/quickstart/#private-assets","title":"Private assets","text":"<ul> <li>If you need BBModels or other private assets see Private Assets, or test on the dev server. You might be ratelimited by GitHub when downloading plugins, the page also explains how to set up your own token for it.</li> <li>If you need access to internal services like browsing files or restarting containers/seeing dev logs, let us know in Discord, you will be added to a team on GitHub.</li> </ul>"},{"location":"coding/conventions/code-conventions/","title":"Coding conventions","text":"<p>We follow the Android Kotlin Style Guide.</p> <p>IntelliJ has an autoformatter that follows this style guide, use <code>Ctrl+Alt+L</code> to run it. If the formatter makes no changes, your code style is good to go.</p> If you need to tell IntelliJ to use the new code style, go here <p></p>"},{"location":"coding/conventions/code-conventions/#use-conventional-commits","title":"Use conventional commits","text":"<p>We use Conventional Commits to format our commit messages. You can see tags you can use that will show up in changelogs here. You can use multi-line messages to add more than one tag at a time. Here's an example valid commit</p> <pre><code>feat!: I made breaking changes!\nfix: I fixed a bug\n\nHere's a longer explanation\n\nchore: I did some boring stuff\n</code></pre>"},{"location":"coding/conventions/code-conventions/#idofront","title":"Idofront","text":"<p>Idofront is a library we share between most of our plugins that adds helper functions, a command DSL, and more. You can find documentation for it in the Idofront tab.</p>"},{"location":"coding/conventions/code-conventions/#publishing","title":"Publishing","text":"<p>Some of our projects are libraries that other projects need to depend on. For example, MineInAbyss depends on DeeperWorld. We have our own maven repository (repo.mineinabyss.com) which lets us add these dependencies in Gradle.</p> <p>Please use <code>com.mineinabyss</code> as the group id for new projects for consistency.</p>"},{"location":"coding/conventions/new-project/","title":"Starting a New Project","text":"<p>We provide a  project template, which you can use to start a new project. We will add instructions to the README file to help you get started in the future.</p>"},{"location":"coding/conventions/new-project/#licensing","title":"Licensing","text":"<p>We don't enforce any specific license for Mine in Abyss related projects, but have some general recommendations:</p> <ul> <li>Use MIT for libraries or less important plugins.</li> <li>Use AGPL for plugins you don't want someone to be able to continue developing in a closed source manner. We recommend AGPL over GPL since plugins don't need to be installed by end users, and the GPL doesn't force someone to distribute source code in this case.</li> <li>Use a Creative Commons license for non-code assets like textures or sounds (ex. we sometimes use the more restrictive NC variant that force non-commercial use.)</li> </ul>"},{"location":"coding/conventions/versioning/","title":"Versioning","text":"<p>We have a plugin called autoversion in Idofront that will automatically append a PATCH (third) version number. You can manually set the rest, ex. <code>0.8</code></p> <p>Keep the <code>version</code> and <code>group</code> properties in a project's <code>gradle.properties</code> file and try to follow the MAJOR.MINOR pattern as described by semver, with the PATCH appended automatically by autoversion.</p> <p>Use the <code>develop</code> branch to automatically create pre-releases with <code>-dev.x</code> appended to the end.</p>"},{"location":"coding/deps/gradle/","title":"Gradle","text":"<p>We have a big version catalog in Idofront that all other projects depend on. It includes versions for Kotlin, Minecraft, common gradle plugins, other Paper plugins, and more. These can also be overridden for specific projects when importing the catalog.</p>"},{"location":"coding/deps/gradle/#updatingadding-dependencies","title":"Updating/adding dependencies","text":"<p>To update versions everywhere, or add a new dependency that may be useful to other plugins, change the <code>libs.versions.toml</code> file in Idofront.</p> <p>Only deps in the <code>platform</code> bundle will be shaded into the Idofront server jar. A lot of dependencies are other plugins, or compiler plugins that don't need to be in the plugin jar.</p>"},{"location":"coding/deps/gradle/#automatically-update-dependencies-in-idofront","title":"Automatically update dependencies in Idofront","text":"<p>Run <code>gradle versionCatalogUpdate</code> in Idofront to automatically update the <code>libs.versions.toml</code> file, by default it ignores prereleases.</p>"},{"location":"coding/deps/gradle/#update-blockers","title":"Update blockers","text":"<p>Compose Multiplatform is usually the biggest blocker for updating Kotlin version. You may mitigate this by changing the compiler version used by compose, but this can be buggy and generally it's better to wait for it to update.</p>"},{"location":"coding/deps/gradle/#update-frequency","title":"Update frequency","text":"<p>We've had many problems in the past with updating too much too fast. Don't make breaking version changes more than like once a quarter, updating all the plugins is a pain .</p>"},{"location":"coding/deps/server/","title":"Server","text":"<ul> <li> <p>We use  Keepup to automatically download plugins on our servers. Usage instructions are in the README.</p> </li> <li> <p>Plugin versions themselves are defined in MineInAbyss/server-config.</p> </li> </ul>"},{"location":"coding/learn/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kotlin*</li> <li>github*</li> </ul>"},{"location":"coding/learn/github/","title":"Collaborating with GitHub","text":"<p>Definition: Git</p> <p>A tool that helps people collaborate on code and keep a history of changes. A project tracked in git is called a repository.</p> <p>Definition: GitHub</p> <p>A website we use to host our git repositories and track things that need to be coded under issues.</p>"},{"location":"coding/learn/github/#how-to-contribute-with-git-and-github","title":"How to contribute with git and GitHub","text":"<p>Below is a great in-depth video guide going through the entire process of contributing to a project like ours with IntelliJ. It's a little lengthy but will teach you everything you need to know to work efficiently with git and GitHub.</p> <p>If you're into reading, you can also check out  GitHub's quickstart guide.</p>"},{"location":"coding/learn/kotlin/","title":"Learn Kotlin","text":"<p>We use  Kotlin to make our plugins. Kotlin is built on the same thing as Java, so we often interact with Java as well. This guide will help you start learning Kotlin or programming in general.</p>"},{"location":"coding/learn/kotlin/#im-new-to-coding","title":"I'm new to coding","text":"<p>Recommended: Kotlin Basics track</p> <p>A free learning track on Hyperskill. It splits everything into small modules starting from 0 and building up to a project of your choice.</p>"},{"location":"coding/learn/kotlin/#im-new-to-kotlin","title":"I'm new to Kotlin","text":"<p>Recommended: Kotlin Learning Materials</p> <p>Try the materials in order, the basic syntax and idioms pages should be enough to let you hop into one of our projects!</p>"},{"location":"coding/resources/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Version List</li> <li>Build matrix</li> </ul>"},{"location":"coding/resources/build-matrix/","title":"Build matrix","text":"Name Release Prod Develop <code>MineInAbyss</code> <code>Geary</code> <code>Geary-papermc</code> <code>Mobzy</code> <code>Looty</code> <code>Blocky</code>"},{"location":"coding/resources/version-list/","title":"Plugin version list","text":"<ul> <li>Preferred gradle version</li> </ul>"},{"location":"coding/resources/version-list/#dependencies","title":"Dependencies","text":"<ul> <li><code>geary</code></li> <li><code>idofront</code></li> <li><code>guiy-compose</code></li> <li><code>protocolburrito</code></li> </ul>"},{"location":"coding/resources/version-list/#general-plugins","title":"General plugins","text":"<ul> <li><code>blocky</code></li> <li><code>chatty</code></li> <li><code>looty</code></li> <li><code>mobzy</code></li> <li><code>emojy</code></li> <li><code>packy</code></li> <li><code>extracommands</code></li> </ul>"},{"location":"coding/resources/version-list/#server-plugins","title":"Server plugins","text":"<ul> <li><code>bonfire</code></li> <li><code>deeperworld</code></li> <li><code>mineinabyss</code></li> <li><code>stamina-climb</code></li> <li><code>bonehurtingjuice</code></li> </ul>"},{"location":"coding/resources/version-list/#dependants-tree","title":"Dependants tree","text":"<p>Deeper items depend on shallower items.</p> <ul> <li><code>idofront</code> (pretty much everything)</li> <li><code>geary</code><ul> <li><code>blocky</code></li> <li><code>chatty</code></li> <li><code>looty</code></li> <li><code>mobzy</code></li> <li><code>emojy</code></li> <li><code>bonfire</code></li> <li><code>mineinabyss</code></li> <li><code>staminaclimb</code></li> <li><code>packy</code></li> <li><code>eternalfortune</code></li> </ul> </li> <li><code>mineinabyss</code><ul> <li><code>deeperworld</code></li> </ul> </li> </ul>"},{"location":"coding/server-management/overview/","title":"Overview","text":"<p>This page goes over general sysadmin info. We try to be open about these things so other projects can benefit from our work. Most of the projects linked here go into a lot more detail about how they work, be sure to check them out!</p>"},{"location":"coding/server-management/overview/#hosting","title":"Hosting","text":"<p>We use a dedicated machine on Hetzner for hosting. It\u2019s located in Germany as it's cheaper compared to services like OVH in America.</p>"},{"location":"coding/server-management/overview/#infra","title":"Infra","text":"<p>Infra is handled via Docker and Ansible</p> <ul> <li>We publish our own server image on MineInAbyss/Docker-images </li> <li>We keep docker-compose stacks at MineInAbyss/Docker-stacks</li> <li>We manage machine setup with Ansible at MineInAbyss/ansible-in-abyss</li> </ul>"},{"location":"coding/server-management/overview/#domain","title":"Domain","text":"<p>We use Cloudflare for DNS as well as a registrar. We have a wildcard domain set up to get SSL on all internal services easily with Traefik.</p>"},{"location":"geary/","title":"About","text":"<p> GitHub  KDoc</p> <p>Geary is an Entity Component System (ECS) written in Kotlin. It was originally designed for use with custom Minecraft: Java Edition servers.</p>"},{"location":"geary/#quick-ecs-resources","title":"Quick ECS resources","text":"<ul> <li>Understanding Component-Entity-Systems, an excellent article outlining basic concepts of an Entity Component System.</li> <li>ECS Wikipedia page</li> </ul>"},{"location":"geary/SUMMARY/","title":"SUMMARY","text":"<ul> <li>*.md</li> <li>Quickstart</li> <li>Guide</li> <li>Backend</li> </ul>"},{"location":"geary/quickstart/","title":"Quickstart","text":"<p>WIP, in-development syntax</p> <p>This page is a work in progress and includes syntax currently in development versions of Geary.</p> <p>This page gives an overview of Geary's syntax and features, the rest of the guide will dive more in depth and assume less knowledge about ecs. Think of this as a Geary by example guide.</p>"},{"location":"geary/quickstart/#setup","title":"Setup","text":"<pre><code>// Create an isolated engine world\nval world: Geary = geary(ArchetypeEngineModule()) {\n    // install wanted addons here\n}.start()\n\n// Functions can use the world as a receiver\nfun Geary.doSomething() {\n    entity {\n        set(Position(0, 0))\n        // ...\n    }\n}\n\n// Rest of the guide happens in this context\nwith(world) { \n    doSomething()\n}\n</code></pre> <p>Most of Geary is prepared for Kotlin multiplatform but currently only the JVM target is fully implemented.</p>"},{"location":"geary/quickstart/#define-components","title":"Define components","text":"<pre><code>data class Position(var x: Double, var y: Double)\ndata class Velocity(var x: Double, var y: Double)\nsealed class Alive\n</code></pre> <ul> <li>Any class can act as a component</li> <li>Data classes recommended</li> <li>Mutable vars are allowed but won't automatically trigger component changed events unless manually calling <code>set</code></li> <li>Use sealed class for 'marker' components that don't have data attached to them.</li> </ul>"},{"location":"geary/quickstart/#manage-entities","title":"Manage entities","text":"<pre><code>// create\nval entity = entity()\n\n// remove\nentity.removeEntity()\n\nval entity2 = entity {\n    ...\n} // equivalent to entity().apply { ... }\n</code></pre>"},{"location":"geary/quickstart/#set-data","title":"Set data","text":"<pre><code>val exampleEntity = entity {\n    set(Position(0, 0)) // Set Position component\n    set(Position(1, 0)) // Override previous Position component with new data\n    set&lt;Velocity&gt;(Velocity(1, 1)) // Explicitly define type\n    remove&lt;Velocity&gt;() // Unset Velocity component\n    add&lt;Alive&gt;() // Add component without data\n}\n</code></pre>"},{"location":"geary/quickstart/#read-data","title":"Read data","text":"<pre><code>exampleEntity.apply {\n    get&lt;Position&gt;() // return type is Position? (in this case, Position(1, 0))\n    get&lt;Alive&gt;() // return type is Alive? (in this case, null)\n    has&lt;Alive&gt;() // returns true since we added earlier\n    has&lt;Velocity&gt;() // returns false since we removed the component\n}\n</code></pre>"},{"location":"geary/quickstart/#queries","title":"Queries","text":"<p>Queries match entities based on their components, they can be used to read or modify data.</p>"},{"location":"geary/quickstart/#creating-queries","title":"Creating queries","text":"<p>Queries always extend the <code>Query</code> class and filter using delegates.</p> <pre><code>// A manually defined query matching entities with both Position and Velocity components\nclass MyQuery: Query() {\n    var position by get&lt;Position&gt;()\n    val velocity by get&lt;Velocity&gt;()\n}\n\n// An anonymous object may be used as a query if we don't need to reference it elsewhere\nobject: Query() {\n    var position by get&lt;Position&gt;()\n    val velocity by get&lt;Velocity&gt;()\n}\n</code></pre>"},{"location":"geary/quickstart/#shorthands","title":"Shorthands","text":"<p>Geary provides some helper functions to define queries more concisely.</p> <pre><code>// A shorthand to define read-only queries inline\nquery&lt;Position, Velocity&gt;()\n\n// These also support nullable types for optional components\nquery&lt;Position?, Velocity&gt;()\n</code></pre>"},{"location":"geary/quickstart/#iterating-queries","title":"Iterating queries","text":"<p>Queries can be run in-place (ex. when querying for dynamic information like children of an entity) or cached for faster performance.</p>"},{"location":"geary/quickstart/#cached-queries","title":"Cached queries","text":"<pre><code>// Cache the query for fast matching\nval query = cache(MyQuery())\n\n// get all entities with both position and velocity components\nval matchedEntities: List&lt;Entity&gt; = query.entities()\n\n// Extract data from our query\nval dataFromMatched: List&lt;Pair&lt;Position, Velocity&gt;&gt; = query.map { position to velocity }\n\n// Run directly on query\nquery.forEach {\n    // we can modify position directly because we declared its delegate as var\n    position.x += velocity.x\n    position.y += velocity.y\n}\n\n// Shorthand queries can be destructured for convenience\ncache(query&lt;Position, Velocity&gt;()).forEach { (position, velocity) -&gt;\n    println(\"Position: $position, Velocity: $velocity\")\n}\n</code></pre> <ul> <li>Collecting to a list is much slower than iterating directly with forEach since memory needs to be allocated for the list.</li> </ul>"},{"location":"geary/quickstart/#in-place-queries","title":"In-place queries","text":"<p>In-place queries aren't implemented yet, however matching entities can be done using <code>findEntities</code> <pre><code>// Get entities matching a family\nfindEntities { has&lt;Position&gt;(); has&lt;Velocity&gt;(); }\n\n// Get entities matching a query\nfindEntities(query&lt;Position, Velocity&gt;())\n</code></pre></p>"},{"location":"geary/quickstart/#ensure-block","title":"Ensure block","text":"<p>We can also match arbitrary families, in this case <code>this</code> refers to our queried entity, so we use the following syntax:</p> <pre><code>object: Query() {\n    override fun ensure() = this { or { has&lt;Position&gt;(); has&lt;Velocity&gt;() } }\n}\n</code></pre>"},{"location":"geary/quickstart/#systems","title":"Systems","text":"<p>Systems are cached queries with an <code>exec</code> block attached, they can also be repeating.</p> <pre><code>// We define a function to create our system, note the receiver used to have access to the world context.\nfun Geary.createVelocitySystem() = system(object: Query() {\n    val position by get&lt;Position&gt;()\n    val velocity by get&lt;Velocity&gt;()\n}).exec {\n    position.x += velocity.x\n    position.y += velocity.y\n}\n\n// Run exec on all entities matching the query\nworld.createVelocitySystem().tick()\n</code></pre>"},{"location":"geary/quickstart/#repeating-systems","title":"Repeating systems","text":"<pre><code>// We prefer defining systems in functions\nfun Geary.createVelocitySystem() = system(object: Query() { ... })\n    .every(1.seconds) // Duration used to calculate every n engine ticks the system should exec\n    .exec { ... }\n\nworld.createVelocitySystem()\nworld.tick() // ticks all registered repeating systems\n</code></pre>"},{"location":"geary/quickstart/#deferred-systems","title":"Deferred systems","text":"<p>Systems cannot safely or quickly perform entity type modifications (i.e. component add or remove calls, we can only modify already set data, and even this can't call component modify events). Instead, we can iterate over all matched entities, gather data, and then perform modifications once system iteration completes:</p> <pre><code>fun Geary.createDeferredSystem() = system(object : Query() {\n    val string by get&lt;String&gt;()\n}).defer {\n    // This could be a heavier calculation that benefits from memory being close together!\n    string.length &gt; 10\n}.onFinish { result: Boolean, entity: GearyEntity -&gt;\n    // We can safely do entity modifications here, everything runs in sync!\n    if (result) {\n        entity.add&lt;TooLong&gt;()\n        entity.remove&lt;String&gt;()\n    }\n}\n</code></pre>"},{"location":"geary/quickstart/#observers","title":"Observers","text":"<p>Observers listen to events emitted on entities. Geary comes with some built in events for component modifications, like <code>OnSet</code>, <code>OnRemove</code>, <code>OnAdd</code>, <code>OnEntityRemove</code>, etc...</p>"},{"location":"geary/quickstart/#simple-observer","title":"Simple observer","text":"<pre><code>observe&lt;OnEntityRemove&gt;().exec {\n    println(\"Entity removed\")\n}\nval entity = entity()\nentity.removeEntity() // Prints \"Entity removed\"\n</code></pre>"},{"location":"geary/quickstart/#filter-by-involved-components","title":"Filter by involved components","text":"<p>Certain events like <code>OnSet</code> involve a component. Observers may check for a single involved component, or any in a list, or not restrict at all.</p> <pre><code>observe&lt;OnSet&gt;().involving&lt;Position, Velocity&gt;().exec {\n    println(\"Either position or velocity set!\")\n}\n// Equivalent to involving(entityTypeOf(componentId&lt;Position&gt;, componentId&lt;Velocity&gt;()))\n\nval entity = entity()\nentity.set(Position(0, 0)) // Prints \"Either position or velocity set!\"\nentity.set(Velocity(0, 0)) // Prints \"Either position or velocity set!\"\nentity.set(Position(1, 1)) // Prints \"Either position or velocity set!\"\nentity.set(UnrelatedComponent()) // Does nothing\n</code></pre>"},{"location":"geary/quickstart/#filtering-by-query","title":"Filtering by query","text":"<p>We can also filter to match a query, this is useful for reading data off entities in an event or reacting to several components being set.</p> <pre><code>observe&lt;OnSet&gt;()\n    .involving&lt;Position, Velocity&gt;()\n    .exec(query&lt;Position, Velocity&gt;()) { (position, velocity) -&gt;\n        println(\"Position: $position, Velocity: $velocity\")\n    }\n// For short, we can write involving(query&lt;Position, Velocity&gt;()) for simple query definitions.\n\nval entity = entity()\nentity.set(Position(0, 0)) // Nothing gets fired since we fail to match query&lt;Position, Velocity&gt;()\nentity.set(Velocity(0, 0)) // Prints \"Position: Position(0, 0), Velocity: Velocity(0, 0)\"\nentity.set(Position(1, 1)) // Prints \"Position: Position(1, 1), Velocity: Velocity(0, 0)\"\n</code></pre>"},{"location":"geary/quickstart/#custom-events","title":"Custom Events","text":"<p>Components can be emitted as custom events on entities. These may or may not hold data, and observers can listen to them globally or on a specific entity.</p>"},{"location":"geary/quickstart/#event-data","title":"Event data","text":"<p>Events may or may not hold data, observers can optionally only listen to events with data.</p> <pre><code>class MyEvent(val data: String)\n\nval entity = entity()\n\nobserve&lt;MyEvent&gt;().exec {\n    println(\"Observe without data\")\n}\nobserveWithData&lt;MyEvent&gt;().exec {\n    println(\"Observe with data: ${event.data}\")\n}\n\nentity.emit&lt;MyEvent&gt;() // Prints \"Observe without data\"\nentity.emit(MyEvent(\"Hello world!\")) // Prints \"Observe without data\" and \"Observe with data: Hello world!\"\n</code></pre>"},{"location":"geary/quickstart/#involved-entities","title":"Involved entities","text":"<p>Events can specify an involved component/entity, observers can filter based on this as shown earlier.</p> <pre><code>entity.emit&lt;MyEvent&gt;(involving = component&lt;Position&gt;())\n</code></pre>"},{"location":"geary/quickstart/#on-a-specific-entity","title":"On a specific entity","text":"<p>Observers can listen to events on a specific entity and its instances.</p> <pre><code>class OnClick\n\nval button = entity()\nval somethingElse = entity()\n\nbutton.observe&lt;OnClick&gt;().exec {\n    println(\"Button clicked!\")\n}\n\nbutton.emit&lt;OnClick&gt;() // Prints \"Button clicked!\"\nsomethingElse.emit&lt;OnClick&gt;() // Does nothing\n</code></pre>"},{"location":"geary/backend/","title":"Backend","text":"<p>This section focuses on the backend architecture and design of our engine and other systems. Part of its purpose is to help document decisions and let others learn from them when building their own ECS.</p>"},{"location":"geary/backend/SUMMARY/","title":"SUMMARY","text":"<ul> <li>resources*.md</li> <li>core*/</li> <li>future-plans*/</li> <li>*md</li> <li>*/</li> </ul>"},{"location":"geary/backend/resources/","title":"Resources","text":"<p>This page includes resources I used to learn about ECS design.</p> <ul> <li>ECS FAQ An overview of everything ECS and people's different approaches.</li> <li>Building an ECS #1: Types, Hierarchies and Prefabs A guide about the design of Flecs by its creator.</li> <li>ECS back and forth An overview of ECS and many performance tricks used by the creator of EnTT.</li> <li>The Flecs Discord server It has channels for making your own ECS. You can find it on their homepage.</li> <li>Overwatch gameplay architecture and netcode   A talk that goes into what you can do with an ECS and some design decisions behind the one Overwatch uses.</li> </ul>"},{"location":"geary/backend/core/","title":"Overview","text":"<p>We use an archetypal engine, heavily inspired by flecs (especially our concept of relations.) Ensure you read the Geary guide before starting this, as I use many terms and concepts from there.</p> <p>The core functionality we want from ECS is adding and removing data on entities, and quickly querying entities to work with our data.</p>"},{"location":"geary/backend/core/#archetypes","title":"Archetypes","text":"<p>We group entities with an identical set of components into one \"archetype.\" The reasoning is that most situations with really high entity counts have many similar entities (imagine a set of 1 million particles.) We can also memoize some expensive operations using archetypes, so they also act as a sort of cache layer.</p> <p>Notice that there are downsides too, since adding and removing components on an entity requires moving a bunch of data from one archetype to another (this isn't an issue when just updating data though, which is a relief!) Generally archetypes are said to maximize iteration performance, at the cost of slower data modification.</p>"},{"location":"geary/backend/core/#querying-data","title":"Querying data","text":"<p>The core part of writing fast queries is efficiently finding all the archetypes that match a family of components. We can cache a lot of this work for queries that run often (ex. in repeating systems) at the cost of memory usage.</p> <p>Once we get all matching archetypes, we also need to efficiently read data for each entity, which traditionally comes from tightly packing it in memory (but this is difficult on the JVM.)</p> <p>In the rest of this section, we'll explore the specifics of how Geary modifies entity data, and queries it.</p>"},{"location":"geary/backend/core/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Overview</li> <li>Archetype Graph</li> <li>Querying Archetypes</li> <li>Changing Data</li> <li>Events</li> </ul>"},{"location":"geary/backend/core/archetype-graph/","title":"Archetype Graph","text":"<p>Note</p> <p>This method of archetype storage is heavily inspired by Flecs' archetype graph. Their article goes into more detail on performance considerations and implementation.</p> <p>Since our engine groups entities by archetypes, adding or removing components requires us to move entities from one archetype to another. To add/remove a component, remove the entity from its current archetype, find the right one to jump to, and add it to that archetype.</p> <p>This page explores how we can quickly figure out the correct archetype to jump to for better performance.</p>"},{"location":"geary/backend/core/archetype-graph/#a-simple-graph","title":"A simple graph","text":"<p>Consider a graph where each node is an archetype and each edge represents a component addition. We build this graph by adding components <code>A, B, C</code> in order:</p> <pre><code>flowchart LR\n  1[Empty] --&gt;|+A| 2[A];\n  2 --&gt;|+B| 3[A, B];\n  3 --&gt;|+C| 4[A, B, C];</code></pre> <p>A new entity gets added to the <code>Empty</code> archetype, then adding <code>A</code> leads us to archetype <code>[A]</code>, adding <code>B</code> leads us to archetype <code>[A, B]</code>, etc...</p>"},{"location":"geary/backend/core/archetype-graph/#avoiding-duplicates","title":"Avoiding duplicates","text":"<p>However, if we are not careful about the order we add components in, we may end up with useless branches. For instance, adding <code>C, B, A</code> is identical to adding <code>A, B, C</code>; we should end up at the same archetype.</p> <p>We can order components by their component id to avoid this problem. However, we don't usually add all our components at once, so we can't sort them ahead of time. Consider a new entity where we skip adding <code>A</code>, and add <code>B</code> instead. This is a valid operation and leads us to a unique arechetype:</p> <pre><code>flowchart LR\n1[Empty] --&gt;|+A| 2[A];\n2 --&gt;|+B| 3[A, B];\n3 --&gt;|+C| 4[A, B, C];\n1 --&gt;|+B| 5[B];</code></pre> <p>What connection should we make if this new entity later adds <code>A</code>? Clearly we want it to go to archetype <code>[A, B]</code>, as its components are sorted correctly:</p> <pre><code>flowchart LR\n1[Empty] --&gt;|+A| 2[A];\n2 --&gt;|+B| 3[A, B];\n3 --&gt;|+C| 4[A, B, C];\n1 --&gt;|+B| 5[B];\n5 --&gt;|+A| 3;</code></pre> <p>Programmatically, to find the right archetype to jump to, we go all the way back to <code>Empty</code> and add all our components (including the new one) in order, then memorize the archetype we jumped to, so we get to it faster in the future.</p> <p>Always going from the start and adding in order ensures we will reuse as many paths as we can, and that all archetypes are unique (pause and convince yourself why.)</p>"},{"location":"geary/backend/core/archetype-graph/#removing-components","title":"Removing components","text":"<p>We can easily support component removal by doing the same process, but removing a component from our list when traversing from <code>Empty</code>.</p>"},{"location":"geary/backend/core/archetype-graph/#creating-new-archetypes","title":"Creating new archetypes","text":"<p>We can now safely integrate this system with one that creates new archetypes as needed, automatically building out the graph as we add new entities and components!</p>"},{"location":"geary/backend/core/archetype-graph/#ups-and-downs","title":"Ups and downs","text":"<p>The archetype graph lets us very quickly figure out how to navigate across archetypes by caching transitions. The downside is that we end up with a trail of empty archetypes that we'll forever have to deal with, as well as more memory used per archetype to remember transitions.</p> <p>However, this extra memory usage should generally be quite small compared to the actual data stored on entities: A bigger graph implies more data stored per entity.</p> <p>In general, I've decided to treat the graph, and archetypes themselves as a caching layer. In some applications it may be worth writing a garbage collector, or perhaps something that puts archetypes to \"sleep\" for system iteration, but in a big application like a game, the graph should eventually reach a steady size as most game actions become seen and start to repeat.</p>"},{"location":"geary/backend/core/changing-data/","title":"Changing Data","text":"<p>There are two general ways to modify data on an entity:</p> <ul> <li>Arbitrary operation with a known entity reference (we often do this when an external system like Minecraft changes state and this state needs to be propagated to our engine)</li> <li>Iteration, where we don't care about specific entities, only families they match.</li> </ul> <p>Let's explore how we handle these two situations.</p>"},{"location":"geary/backend/core/changing-data/#entity-references","title":"Entity references","text":"<p>All entity references are a 64-bit ID. When we modify data on an entity, we first get the entity's Record (its archetype and index within the archetype), then update data within the archetype or move it to another archetype (ex when adding/removing components.)</p> <p>Currently, this is done in the TypeMap class, which uses a hashmap under the hood, but an array is probably better since we reuse entity IDs after deletion anyway. I think flecs mentions a hashmap because they append a few \"version\" bits when reusing an id to avoid problems when holding onto an entity reference, but we don't currently do this since we hold long term references through a <code>UUID</code> component + <code>UUID -&gt; entity id</code> hashmap anyways.</p> <p>Naturally this introduces some indirection and a lot of jumping around in memory, but these actions don't run as often as system iteration and so the indirection should be acceptable.</p>"},{"location":"geary/backend/core/changing-data/#iteration","title":"Iteration","text":"<p>When iterating through many entities, we avoid jumping through the reference using <code>accessors</code>. These help us construct a system's family while also acting as property delegates that let us access data during iteration. Under the hood, they build instructions for how a system should access data while iterating over each archetype.</p> <p>The process looks something like this: A system knows all archetypes that match its family, so iterating through them is pretty simple. For each archetype, it memoizes indices for the components it'll access. Knowing these, accessing a component for the nth entity in the archetype requires us to access the nth component in each array we already have access to.</p> <p>A core speedup of ecs comes from keeping these data arrays tightly packed, which we'll eventually be able to do in java (see Future plans for memory structure). What still confuses me is how we avoid cache misses when accessing multiple components on one archetype. We're accessing the same index on each array, but these are all spaced out in memory. We could load multiple sections of each tightly packed array to fill up our cache and jump to the next bunch of components once we've gone through the cache, but I have no clue how to approach this on the JVM.</p> <p>Still, system iteration lets us avoid a few layers of indirection even if we're not hitting theoretical max performance.</p>"},{"location":"geary/backend/core/events/","title":"Events","text":""},{"location":"geary/backend/core/events/#intro","title":"Intro","text":"<p>I originally designed Geary for our needs in Minecraft. There are many APIs that let developers extend upon the Minecraft server (we use Bukkit for Mine in Abyss), but a lot are event driven (i.e. the correct way to add custom behaviour is usually to intercept an event and customize the outcome.)</p> <p>What interested me is that usually the way an event gets modified is just by editing the data on it (ex. marking it as cancelled, changing something on a player involved in the event, or changing the strength of an attack.)</p> <p>So, this inspired events as entities in Geary. An event is just a bundle of data, so to fire an event we create a new entity, add data to it, and have a mechanism to find all systems matching this entity.</p>"},{"location":"geary/backend/core/events/#current-implementation","title":"Current implementation","text":"<p>The whole system is unoptimized as hell, but I think there's something to the idea of events that can have arbitrary information added onto them, and to have listeners be built the same way as repeating systems.</p> <p>The key point where this needs to be fast is finding all matching systems (this is the inverse problem of finding all matching entities and I talk about possible ideas for speedups in Querying archetypes). This information is rather hard to cache, and there's a lot of it to cache, but that's the approach currently.</p> <p>We hardcode three types of involvement in an event: an entity is the source, target, or the event itself. When an archetype can act as the event, we track a list of potential listeners for it, (similarly there are lists for when our entity can be a target or source) then when we fire the event, we get an intersection of all the listeners for involved entities. Notice that we need to do this for each entity, since events have to query multiple entities at a time (source, target, and the event itself.)</p>"},{"location":"geary/backend/core/events/#future-plans","title":"Future plans","text":"<p>Instead of hardcoding this entity involvement, we could use relations that mark an entity as the source or target of the event. Then, we can generalize a system for arbitrarily querying multiple entities (which is especially useful for parent/child relationships!)</p> <p>Once there is a faster solution to finding matching systems, events would be a multi-entity extension to that problem. We are likely to want multi-entity queries elsewhere too (ex parent/child relations), so these solutions should be one.</p>"},{"location":"geary/backend/core/querying-archetypes/","title":"Querying Archetypes","text":""},{"location":"geary/backend/core/querying-archetypes/#matching-arbitrary-queries","title":"Matching arbitrary queries","text":"<p>We can get entities for a query by getting all entities matching that query's family. Currently QueryManager.getEntitiesMatching manages making this lookup for arbitrary queries.</p> <p>It uses a map of component id to a sparse bitset (currently roaring bitmap.) The manager contains an indexed list of archetypes and the nth bit of any sparce bitset represents whether the nth archetype contains that component.</p> <p>So to get all archetypes that contain component A and B, we get the bitsets for A and B and do an AND operation for all their bits. We can then somewhat efficiently iterate over all set bits, and thus over all archetypes matching our query.</p> <p>What <code>getEntitiesMatching</code> does is translate a family into bitset operations that leave all matching archetypes for that family.</p>"},{"location":"geary/backend/core/querying-archetypes/#performance-ideas","title":"Performance ideas","text":"<p>This is actually a relatively slow process, and it's possible to achieve speedups by knowing the size of each bitset. I've seen other ECS implementations use some form of array instead of bitsets and simply start with the smallest one to narrow down what entities should be considered. Sparse bitsets could potentially give a similar result, but I haven't explored optimizations in this area.</p>"},{"location":"geary/backend/core/querying-archetypes/#tracking-registered-queries","title":"Tracking registered queries","text":"<p>For better performance, systems will just register themselves and whenever a new archetype gets added, all registered systems will check whether it matches their query.</p> <p>The memory used by this is small since the number of systems ever registered is tiny compared to number of archetypes that could potentially exist.</p>"},{"location":"geary/backend/core/querying-archetypes/#performance-ideas_1","title":"Performance ideas","text":"<p>Currently, when a new archetype gets created we iterate over all registered systems and check which ones match. There aren't many systems, but each one doing the match check adds some time complexity.</p> <p>I've thought about potentially building up a graph similar to the archetype graph, which instead holds all registered systems. You could implement rules to navigate the graph based on the query and cover all matching systems as it is being navigated.</p> <p>This becomes pretty hard since operations can be nested, and there's many types, but we know from propositional logic that the <code>NOT</code> and <code>OR</code>/<code>AND</code> connectives are enough to cover a query composed of any possible connectives we could come up with. This could simplify the graph building enough that if a query could be reduced to those two connectives, the graph could be quickly traversed and all matching systems found in a fraction of the time.</p>"},{"location":"geary/backend/future-plans/memory-structure/","title":"Memory structure","text":"<p>Many ECSes advertise their speed over object-oriented approaches. How an ECS structures its data and the benefits or downsides that come with it is a complex topic, with many structures to explore. However, a common approach in designing an ECS is to keep related data together, specifically to help avoid cache misses.</p> <p>The JVM has traditionally managed a lot of memory organization on its own, but through Project Valhalla we can hopefully get more control over the memory structure (at least ensure tightly packed data) and start thinking about optimizations from there.</p> <p>For anyone interested, the following talk goes over how to think about CPU cache and some of its quirks:</p>"},{"location":"geary/guide/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Setup</li> <li>Addons</li> <li>Entities</li> <li>Designing Components</li> <li>Relations</li> <li>Systems</li> </ul>"},{"location":"geary/guide/addons/","title":"Addons","text":"<p>Geary has a simple addon system inspired by Ktor that lets you write addons that other code can configure, dsl blocks like <code>serialization</code> and <code>autoscan</code> use the addon system under the hood.</p>"},{"location":"geary/guide/addons/#installing-an-addon","title":"Installing an addon","text":"<p>Addons can be installed within the root <code>geary</code> configuration or an addon's configuration block, as shown later.</p> <pre><code>geary(ArchetypeEngineModule()) {\n    install(MyAddon)\n}\n</code></pre>"},{"location":"geary/guide/addons/#creating-a-non-configurable-addon","title":"Creating a non-configurable addon","text":"<p>You may use addons to set up your engine, in this case it's unlikely any other part of code will need to further configure your addon, so we may use a Unit for our configuration, or omit the block entirely.</p> <pre><code>val MyAddon = createAddon&lt;Unit&gt;(\"My addon\", configuration = {\n    // this block will run immediately, use it to ensure other addons are loaded\n    install(AnotherAddon)\n    serialization { ... }\n}) {\n    // this block will run after all addons are configured and geary.start() is called\n    // it provides some helper blocks to run your code on different load phases, shown below in their load order\n    components {\n        // initialize any components you need, ex. autoscan uses this block\n    }\n\n    systems {\n        // Create your systems here, these should exist before any entities are created, though can be registered later too\n    }\n\n    entities {\n        // Load any entities you need, ex. prefabs uses this to load entiteis from files\n    }\n\n    onStart {\n        // All other phases have finished and your addon can run its startup tasks\n    }\n}\n</code></pre>"},{"location":"geary/guide/addons/#configurable-addons","title":"Configurable addons","text":"<p>You may use the <code>configuration</code> block to provide a configuration class for your addon, which can be used by other addons, and inside your init block.</p> <pre><code>class MyConfigurableAddon {\n    val printStrings: MutableList&lt;String&gt; = mutableListOf()\n\n    fun add(text: String) = printStrings.add(text)\n}\n\nval MyAddon = createAddon(\"My addon\", configuration = {\n    MyConfigurableAddon()\n}) {\n    onStart {\n        configuation.printStrings.forEach { println(it) }\n    }\n}\n</code></pre> <p>Now other plugins may do:</p> <pre><code>install(MyAddon) {\n    add(\"A string!\")\n}\n</code></pre>"},{"location":"geary/guide/addons/#configurable-addon-with-builders","title":"Configurable addon with builders","text":"<p>Finally, you may split your addon into a mutable builder for the configuration phase and a built addon for init. This is useful if other addons need to access your addon at runtime, but not modify its data:</p> <pre><code>class MyBuilder {\n    fun build(): MyBuiltConfig = ...\n}\n\nclass MyBuiltConfig { ... }\n\nval MyAddon = createAddon(\"My addon\", configuration = {\n    MyBuilder()\n}) {\n    val built = configuration.build()\n\n    onStart {\n        built.doSomething()\n    }\n\n    built\n}\n</code></pre> <p>Now other addons can use your built class after addons are initialized, or during their own initialization if they are loaded after your addon (ex. by calling <code>install</code> in their configuration block.)</p> <pre><code>val built: MyBuiltConfig = geary.getAddon(MyAddon)\n</code></pre>"},{"location":"geary/guide/designing-components/","title":"Designing Components","text":""},{"location":"geary/guide/designing-components/#use-data-classes-when-possible","title":"Use <code>data</code> classes when possible","text":"<p>Data classes auto-generate useful methods like <code>copy</code>, <code>equals</code>, and <code>hashCode</code>. Try to use them for all your components, ex:</p> <pre><code>data class Location(val x: Int, val y: Int, val z: Int)\n</code></pre>"},{"location":"geary/guide/designing-components/#use-sealed-classes-for-data-less-components","title":"Use <code>sealed</code> classes for data-less components","text":"<p>If a component should only ever be added to an entity, not set, a sealed class ensures it cannot be instantiated and nobody else can extend it, ex:</p> <pre><code>sealed class ReadyForBattle\n\nentity.add&lt;ReadyForBattle&gt;()\nentity.set(ReadyForBattle()) // Fails to compile\n</code></pre>"},{"location":"geary/guide/designing-components/#avoid-inheritance","title":"Avoid inheritance","text":"<p>Inheritance breaks modularity. Only use it if a library you work with already uses it.</p> <pre><code>class Animal { ... }\nclass Pig: Animal { ... }\n\nentity().set(Pig())\n</code></pre> Unclear whether this should be set as an animal or pig <p>If we set a <code>Pig</code>, then anything that reads <code>Animal</code> will think it's not there! Similarly, if we set <code>Animal</code>, then nothing will know it's actually a <code>Pig</code>. Finally, if our hierarchy is big enough, we can't reasonably set every possibility.</p> If absolutely necessary <p>Set the component both as a reasonable common parent class and as the exact class. For instance, in Minecraft we use the common <code>Entity</code> class and the specific mob class.</p> <pre><code>sealed class Alive\ndata class Oinks(interval: Duration)\n\nentity {\n    add&lt;Alive&gt;()\n    set(Oinks(5.seconds))\n}\n</code></pre> Each component does one thing clearly <p>We can access either component without worrying about the other, or both if we like to.</p>"},{"location":"geary/guide/designing-components/#aim-for-immutable-components","title":"Aim for immutable components","text":"<p>Keep component properties immutable (<code>val</code>) unless they are absolutely performance critical.</p> <pre><code>data class Health(var amount: Int)\n\nval myHealth = Health(20)\nentity {\n    set(myHealth)\n}\nmyHealth.amount = 0\n</code></pre> <p>We can change amount without anyone knowing!</p> <pre><code>data class Health(val amount: Int)\n\nentity {\n    set(Health(20))\n    set(Health(0))\n}\n</code></pre> <p>Changing health must be done through Geary, it can notify any listeners!</p>"},{"location":"geary/guide/designing-components/#extra","title":"Extra","text":"Don't set generic types like <code>List&lt;String&gt;</code> <p>It is highly discouraged to use generic types with your components, because we can't actually verify those types when getting a component. This is called type erasure. For example:</p> <pre><code>entity {\n    set(listOf(\"strings\")) // sets a list of strings as a component\n    get&lt;List&lt;Int&gt;&gt;() // will succeed!\n}\n</code></pre> <p><code>get&lt;List&lt;Int&gt;&gt;()</code> succeeds because there is no way for us to know the generic type of the list during runtime. However, an error will be thrown when trying to access elements of the list which thought were integers, but are actually strings.</p>"},{"location":"geary/guide/entities/","title":"Entities","text":"<p>This guide is currently incomplete</p> <p>A lot more info will be added soon to give a proper overview needed to get started with Geary.</p>"},{"location":"geary/guide/entities/#definitions","title":"Definitions","text":"<p>Definition: Entity</p> <p>An entity is a unique thing that holds information.</p> <p>Notice how broad this definition is. An entity could be a zombie, a place in the world, the sound made by a player's footstep. What makes our entity unique is an <code>identifier</code> that represents it, in our case a 64-bit number we call <code>EntityId</code>.</p> <p>Definition: Component</p> <p>Individual pieces of data on an entitiy are called components.</p> <p>For instance, a component could be a <code>Location</code>, the <code>Sprite</code> of a monster, the <code>Health</code> of a player.</p> <p>These are not inherently related to each other, for instance an entity can have a location but no sprite if it is invisible. However, components are very useful together. With a sprite and location, we can render something on screen!</p> <p>Tip</p> <p>Each component should hold specific data, i.e. be good at one thing. This lets us choose exactly the data we need to write clean, modular code.</p>"},{"location":"geary/guide/entities/#syntax","title":"Syntax","text":"<p>Let's have a look at creating entities and giving them components.</p> <pre><code>// Create an empty entity\nval entity: Entity = entity()\n\nentity.id // Get the unique id of this entity\n\n// Define a Location component (2)\nclass Location(val x: Double, val y: Double, val z: Double)\n\n// Set(1) a location to our created entity\nentity.set(Location(0.0, 10.0, 0.0))\n\n// Do both at the same time (3)\nval anotherEntity = entity {\n    set(Location(0.0, 0.0, 0.0))\n}\n\n// Read the data we set\nentity.get&lt;Location&gt;() // returns Location?\n</code></pre> <ol> <li>The <code>set</code> operation gives a component to our entity. We'll learn more about it shortly.</li> <li>Notice this is just a regular class! We can add any class as a component, even if we didn't make it ourselves.</li> <li>This is the same as doing <code>entity().apply { ... }</code></li> </ol> Why make an Entity class? <p>Notice how calling <code>entity()</code> returned <code>Entity</code> instead of a number. While it is useful to represent entities as numbers internally, if we wrote an operation like <code>set</code> for all numbers, someone could accidentally do <code>42.set(...)</code> without ever making a 42nd entity!</p> <p>So, we use <code>Entity</code> to write safer code and keep all the operations together. Click on the title below to see full documentation.</p> <p>Tip: Typealiases</p> <p>Geary provides typealiases like <code>GearyEntity</code> for most classes so you can avoid conflicts if you already have a class named <code>Entity</code>.</p>"},{"location":"geary/guide/entities/#entity-operations","title":"<code>Entity</code> operations","text":""},{"location":"geary/guide/entities/#set-gives-an-entity-a-component-with-data","title":"<code>set</code> gives an entity a component with data","text":"<pre><code>entity.set(SomeData())\n</code></pre> <p><code>set</code> takes a type parameter as a key. This is useful when working with another object-oriented application. For example, in Minecraft <code>Player</code> extends <code>LivingEntity</code>. We can set the player as a <code>LivingEntity</code> like so:</p> <pre><code>entity.set&lt;LivingEntity&gt;(player)\n</code></pre>"},{"location":"geary/guide/entities/#get-reads-a-component-of-the-given-type","title":"<code>get</code> reads a component of the given type","text":"<pre><code>val data = entity.get&lt;SomeData&gt;() // returns SomeData? (1)\n</code></pre> <ol> <li>Notice, the returned type is nullable. We need to handle the case when our entity doesn't have this component set.</li> </ol>"},{"location":"geary/guide/entities/#add-assigns-a-component-type-to-an-entity-without-attaching-data","title":"<code>add</code> assigns a component type to an entity, without attaching data","text":"<pre><code>entity.add&lt;Alive&gt;()\n</code></pre> <p><code>add</code> is useful for marker components that don't need to store data. Later we will explore how this feature lets us create relations to other entities.</p> <p>Can we <code>add</code> and <code>set</code> the same component?</p> <p>Yes, all set components are also added ones. Adding again will not remove any data.</p>"},{"location":"geary/guide/entities/#has-checks-whether-an-entity-has-a-setadded-component","title":"<code>has</code> checks whether an entity has a set/added component","text":"<pre><code>entity.has&lt;SomeComponent&gt;() // returns Boolean\n</code></pre>"},{"location":"geary/guide/entities/#remove-removes-a-setadded-component-of-a-given-type","title":"<code>remove</code> removes a set/added component of a given type","text":"<pre><code>entity.remove&lt;SomeComponent&gt;()\n</code></pre>"},{"location":"geary/guide/entities/#with-runs-code-if-an-entity-has-all-requested-components-set","title":"<code>with</code> runs code if an entity has all requested components set","text":"<pre><code>entity.with { loc: Location, sprite: Sprite, health: Health -&gt;\n    println(\"I have all of $loc, $sprite, and $health on me!\")\n}\n</code></pre>"},{"location":"geary/guide/entities/#null-safety","title":"Null safety","text":"<p>Kotlin's null safety is extremely handy when trying to access components, because we are usually not aware of all the components an entity could have.</p> <p>Null safety ensures we know what to do when a component isn't present. Here are some common use cases:</p> <pre><code>entity.get&lt;A&gt;() ?: return // (1)\nentity.get&lt;B&gt;() ?: B() // (2)\nentity.getOrSet&lt;C&gt; { C() } // (3)\n</code></pre> <ol> <li>Tries to get <code>A</code> or stops if not present.</li> <li>Tries to get <code>B</code> or uses a default value.</li> <li>Tries to get <code>C</code> or sets and returns a default value.</li> </ol>"},{"location":"geary/guide/listeners/","title":"Listeners","text":"<ul> <li>Listeners use accessors like Queries, but are not iterators.</li> <li>Instead, they define <code>handlers</code> which run when an event has been called on an entity that matches the requested data.</li> </ul>"},{"location":"geary/guide/listeners/#creating-a-listener","title":"Creating a listener","text":"<p>As usual, extend <code>GearyListener</code> and add accessors:</p> <pre><code>class ExplosionBehaviour : GearyListener() {\n    private val ResultScope.explosionData by get&lt;Explosion&gt;()\n...\n</code></pre>"},{"location":"geary/guide/listeners/#add-handlers","title":"Add handlers","text":"<p>Handlers are added by overriding the <code>GearyHandlerScope.init()</code> function.</p> <p>This function gets called on any matched archetype. It contains info regarding that archetype as well as extension functions to make listening to events easier.</p> <p>You may use <code>on&lt;EventType&gt;{ event -&gt; ... }</code> to create a new handler. This handler puts you in a <code>ResultScope</code> and passes along an <code>event: EventType</code>.</p> <p>Search for extension functions before using this function, since you may accidentally use events that are not handled in Geary at all (ex regular Bukkit events.)</p> <p>Here's a potential example from Minecraft: <pre><code>...\n\n    override fun GearyHandlerScope.init() {\n        onItemLeftClick { event -&gt;\n            event.player.location.explode(explosionData)\n        }\n    }\n}\n</code></pre></p>"},{"location":"geary/guide/listeners/#useful-events","title":"Useful events","text":"<ul> <li> <p><code>onComponentAdd</code> - Fires as soon as all requested components are present on an entity.</p> </li> <li> <p><code>onComponentRemove</code> - Not yet implemented, but will be similar.</p> </li> <li> <p><code>ItemActions</code> - Contains many item-related ones provided by Looty.</p> </li> <li> <p>More related with Bukkit events to come...</p> </li> </ul>"},{"location":"geary/guide/persisting-data/","title":"Persisting data","text":"<ul> <li>Geary works closely with kotlinx.serialization to allow components to be encoded, stored, and persisted.</li> <li>Serializable components can use <code>setPersisting</code>.</li> <li>Use autoscanner to register serializable components for you.</li> </ul>"},{"location":"geary/guide/persisting-data/#uses","title":"Uses","text":"<p>For Minecraft, we persist using the binary format CBOR, as well as YAML for prefabs defined in config files.</p> <p>Use <code>entity.setPersisting</code> with a serializable component to set and persist it.</p>"},{"location":"geary/guide/persisting-data/#making-your-data-serializable","title":"Making your data serializable","text":"<p>Components don't need to be serializable, but you should always try to make yours serializable.</p> <p>Be sure to read more about ktx.serialization, but here's a quick explanation to get you started.</p> <ul> <li>Annotate a class as <code>@Serializable</code> and <code>@SerialName(\"yournamespace:component_name\")</code>.</li> <li>Properties inside will be serialized if they all have a serializer.</li> <li>Use <code>@Transient</code> to avoid serializing a property.</li> </ul>"},{"location":"geary/guide/persisting-data/#polymorphic-serialization","title":"Polymorphic serialization","text":"<p>Since components can be Any object, when you want to serialize any component, use <code>@Polymorphic GearyComponent</code>, ex:</p> <pre><code>@Serializable\n@SerialName(...)\nclass SomeData(\n    val components: List&lt;@Polymorphic GearyComponent&gt;\n)\n</code></pre>"},{"location":"geary/guide/persisting-data/#autoscanning","title":"Autoscanning","text":"<p>Within the Geary extension DSL, you can ask to autoscan and register components. This will allow them to be used with any of the formats stored in the <code>Formats</code> singleton.</p> <p>The autoscanner will look through classes at runtime and automatically register all components annotated with <code>@AutoscanComponent</code>.</p>"},{"location":"geary/guide/relations/","title":"Relations","text":"<p>Geary treats components as entities, so each class gets a unique entity id. Relations take advantage of this by combining two ids together.</p> <p>Definition: Relation</p> <p>A relation is a component-entity pair which may store data.</p> <ul> <li>The entity with the relation is called the <code>source</code></li> <li>The component part is the relation's <code>kind</code>, it defines what the relation is</li> <li>The second is the relation's <code>target</code>, or which entity our relation is with</li> </ul> <p>For instance, we may say Alice has a relation of the kind <code>Friend</code> with Bob. Alice is the relation's source, and Bob is the relation's target.</p>"},{"location":"geary/guide/relations/#use","title":"Use","text":"<p>Relations are extremely useful in many situations where we can't create unlimited components. We explore two key uses for them.</p>"},{"location":"geary/guide/relations/#describing-entity-relations","title":"Describing entity relations","text":"<p>Relations can describe a tangible relation between two entities. For example, parent/child relations, or being the instance of a prefab.</p>"},{"location":"geary/guide/relations/#avoiding-component-reuse","title":"Avoiding component reuse","text":"<p>We may use relations to avoid making many variations of the same component. </p> <p>For instance, if we had potion effects with a duration, instead of a <code>HealingDuration</code>, <code>StrengthDuration</code>, etc... we may use a single <code>Duration</code> component as a relation with any effect.</p>"},{"location":"geary/guide/relations/#syntax","title":"Syntax","text":"<p>Relations may be added or set just like components:</p> <pre><code>sealed class Friend\nsealed class Persists\ndata class Loves(val amount: Int)\n\nval alice = entity()\nval bob = entity()\n\nalice.addRelation&lt;Friend&gt;(bob) //(1)\n\nalice.set&lt;String&gt;(\"Hello world\")\nalice.addRelation&lt;Persists, String&gt;() //(2)\n\nalice.setRelation(Loves(3000), bob) //(3)\n</code></pre> <ol> <li>A relation with kind defined by a component</li> <li>A relation with both kind and target defined by components</li> <li>A relation with data set</li> </ol>"},{"location":"geary/guide/relations/#reading-relations","title":"Reading relations","text":""},{"location":"geary/guide/relations/#getrelation-and-hasrelation-for-reading-a-single-relation","title":"<code>getRelation</code> and <code>hasRelation</code> for reading a single relation","text":"<pre><code>alice.hasRelation&lt;Persists, String&gt;() // returns true\nalice.getRelation&lt;Loves&gt;(bob) // returns Loves(amount = 3000)\n</code></pre>"},{"location":"geary/guide/relations/#getrelations-for-quick-queries","title":"<code>getRelations</code> for quick queries","text":"<p>Geary provides a function that can handle many kinds of relation queries by letting you specify a kind and target through components. Here are the rules:</p> <ul> <li>Any on kind/target &lt;=&gt; The kind/target may be any entity</li> <li>non nullable kind &lt;=&gt; The relation must hold data</li> <li>non nullable target &lt;=&gt; A component of the target's type must also be set on the entity</li> </ul> <pre><code>getRelations&lt;Friend?, Any?&gt;() // Gets any added/set relations with kind Friend\ngetRelations&lt;Loves, Any?&gt;() // Gets any set relations with kind Loves\n</code></pre>"},{"location":"geary/guide/relations/#getrelationswithdata-for-extra-info-in-queries","title":"<code>getRelationsWithData</code> for extra info in queries","text":"<p>The queries are identical to <code>getRelations</code>, but the returned items have a lot more info in them, which looks a bit like this:</p> <pre><code>class RelationWithData&lt;T, K&gt; {\n    val data: T\n    val targetData: K\n    val kind: GearyEntity\n    val target: GearyEntity\n    val relation: Relation\n}\n</code></pre> <p>This is useful for certain applications but requires a bit more overhead:</p> <pre><code>alice.getRelationsWithData&lt;Persists?, Any&gt;().forEach { relWithData -&gt;\n    // assuming save takes the component type, and data to save for it\n    alice.save(relWithData.target, relWithData.targetData)\n}\n</code></pre>"},{"location":"geary/guide/setup/","title":"Setup","text":"<p>Geary uses an addon system to let you load only what you need.</p>"},{"location":"geary/guide/setup/#gradle-setup","title":"Gradle setup","text":"<p>Add the dependencies you want, namely <code>geary-core</code> and any addons that can be found here.</p> <pre><code>repositories {\n    maven(\"https://repo.mineinabyss.com/releases\")\n}\n\ndependencies {\n    val gearyVersion = \"x.y.z\"\n    implementation(\"com.mineinabyss:geary-core:$gearyVersion\")\n    implementation(\"com.mineinabyss:geary-&lt;addon-name&gt;:$gearyVersion\")\n}\n</code></pre>"},{"location":"geary/guide/setup/#initialize-geary","title":"Initialize Geary","text":"<p>Geary provides a helper DSL to get set up, choose an engine implementation, and install your chosen addons.</p> <pre><code>geary(ArchetypeEngineModule()) {\n\n    // Install addons without configuration\n\n    install(UUIDTracking)\n\n    // Some addons provide their own DSL. It will install the addon if it's not already installed\n\n    serialization {\n        format(\"yml\", ::YamlFormat)\n\n        components {\n            component(UUID::class, UUIDSerializer.withSerialName(\"geary:uuid\"))\n        }\n    }\n\n    autoscan(classLoader, \"com.mineinabyss.geary\") {\n        components()\n    }\n}.start()\n// Optionally delay calling start so other parts of the code can call .configure for extra configuration\n</code></pre>"},{"location":"geary/guide/setup/#testing","title":"Testing","text":"<p>Geary provides a testing module which does not start any pipeline tasks automatically. You can also extend <code>GearyTest</code> from the <code>geary-test</code> module to have an isolated world created per test.</p>"},{"location":"geary/guide/systems/SUMMARY/","title":"SUMMARY","text":"<ul> <li>families*.md</li> </ul>"},{"location":"geary/guide/systems/families/","title":"Defining families","text":"<p>Families have a counterpart for the following entity operations: <code>has</code>, <code>hasSet</code>, and <code>hasRelation</code> which match against all entities where those operations would return <code>true</code>.</p> <p>These operations be joined by three connectives, <code>and, not, or</code>.</p>"},{"location":"geary/guide/systems/families/#usage","title":"Usage","text":"<p>Families don't inline connectives (ex. <code>A or B</code>) since we often want to match many components at once. Thus, we use a tree structure.</p> <p>Consider three components, <code>A, B, C</code>, let's try to build some families from them.</p>  A and B A or B or C (A or B) and not C (A or B) and not (child of C) <p><pre><code>family {\n    and {\n        has&lt;A&gt;()\n        has&lt;B&gt;()\n    }\n}\n</code></pre> Families default to the and selector, so this is equivalent to the following:</p> <pre><code>family {\n    has&lt;A&gt;()\n    has&lt;B&gt;()\n}\n</code></pre> <pre><code>family {\n    or {\n        has&lt;A&gt;()\n        has&lt;B&gt;()\n        has&lt;C&gt;()\n    }\n}\n</code></pre> <pre><code>family {\n    or {\n        has&lt;A&gt;()\n        has&lt;B&gt;()\n    }\n    not {\n        has&lt;C&gt;()\n    }\n}\n</code></pre> <pre><code>family {\n    or {\n        has&lt;A&gt;()\n        has&lt;B&gt;()\n    }\n    not {\n        and {\n            hasRelation&lt;ChildOf?, C?&gt;()\n        }\n    }\n}\n</code></pre>"},{"location":"geary/guide/systems/families/#getting-matched-entities","title":"Getting matched entities","text":"<p>Once created, a family can check if an entity matches it with <code>entity in family // Boolean</code>. More importantly, we can now use them in our systems for fast pattern matching in queries.</p>"},{"location":"geary-minecraft/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Content packs</li> <li>Actions &amp; Observers</li> <li>Plugin Developers</li> </ul>"},{"location":"geary-minecraft/actions/","title":"Introduction","text":"<p>The action system is used across items, entities, and blocks to code custom effects. Actions can run on specific events using the <code>observe</code> component (ex. a player clicking a custom item), or repeat passively using the <code>passive</code> component.</p>"},{"location":"geary-minecraft/actions/#observe-events","title":"Observe events","text":"<p>Any Geary prefab can observe events using the <code>observe</code> component. It takes a map of event names found in Events to an Action Group.</p>"},{"location":"geary-minecraft/actions/#examples","title":"Examples","text":"<pre><code>observe:\n  itemLeftClick:\n    - become: parent\n    - sendActionBar: \"Right clicked item!\"\n</code></pre>"},{"location":"geary-minecraft/actions/#passive-actions","title":"Passive actions","text":"<p>Passive actions run continuously on a Geary prefab, optionally matching against certain components. The <code>passive</code> component takes a list of entries as described below</p>"},{"location":"geary-minecraft/actions/#parameters","title":"Parameters","text":"Name Type Description match List A list of component names an instance of this prefab must have for the passive system to run every Duration How often to run this action group run ActionGroup The actions to run when an instance is matched"},{"location":"geary-minecraft/actions/#examples_1","title":"Examples","text":"<pre><code>passive:\n  - match: [ inInventory ]\n    every: 1s\n    run:\n      - become: parent\n      - ensure:\n          mythicConditions:\n            - health{h=&lt;5}\n      - particle:\n          at: \"{{ entity.getLocation }}\"\n          particle: CLOUD\n          offsetY: 1\n          count: 3\n          speed: 0\n      - applyPotionEffects:\n          - type: minecraft:speed\n            duration: 3s\n            amplifier: 2\n            hasParticles: false\n</code></pre>"},{"location":"geary-minecraft/actions/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Introduction</li> <li>Actions</li> <li>Conditions</li> <li>Events</li> </ul>"},{"location":"geary-minecraft/actions/actions/","title":"Actions","text":"<p>An action performs a single effect in the game. They are used by the action system to define what happens on different events, ex. when a player right-clicks a custom item.</p>"},{"location":"geary-minecraft/actions/actions/#available-actions","title":"Available actions","text":""},{"location":"geary-minecraft/actions/actions/any/become/","title":"become","text":""},{"location":"geary-minecraft/actions/actions/any/become/#examples","title":"Examples","text":"<pre><code>become: parent\n</code></pre>"},{"location":"geary-minecraft/actions/actions/any/ensure/","title":"ensure","text":""},{"location":"geary-minecraft/actions/actions/any/ensure/#examples","title":"Examples","text":"<pre><code>ensure:\n  hasConsumable:\n    type: mineinabyss:flamethrower_fuel\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/applyPotionEffects/","title":"applyPotionEffects","text":""},{"location":"geary-minecraft/actions/actions/entity/applyPotionEffects/#examples","title":"Examples","text":"<pre><code>applyPotionEffects:\n  - type: minecraft:speed\n    duration: 3s\n    amplifier: 2\n    hasParticles: false\n  - type: minecraft:jump_boost\n    duration: 5s\n    amplifier: 2\n    hasParticles: false\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/consumeItem/","title":"consumeItem","text":""},{"location":"geary-minecraft/actions/actions/entity/consumeItem/#examples","title":"Examples","text":"<pre><code>consumeItem:\n  type: mineinabyss:flamethrower_fuel\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/playSound/","title":"playSound","text":""},{"location":"geary-minecraft/actions/actions/entity/playSound/#examples","title":"Examples","text":"<pre><code>playSound:\n  sound: minecraft:entity.generic.extinguish_fire\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/sendActionBar/","title":"sendActionBar","text":""},{"location":"geary-minecraft/actions/actions/entity/sendActionBar/#examples","title":"Examples","text":"<pre><code>sendActionBar:\n  text: &lt;red&gt;Out of fuel\n</code></pre>"},{"location":"geary-minecraft/actions/actions/entity/startCooldown/","title":"startCooldown","text":""},{"location":"geary-minecraft/actions/actions/entity/startCooldown/#examples","title":"Examples","text":"<pre><code>startCooldown:\n  id: flamethrower\n  length: 2s\n  display: &lt;dark_aqua&gt;Flamethrower\n</code></pre>"},{"location":"geary-minecraft/actions/actions/location/explode/","title":"explode","text":""},{"location":"geary-minecraft/actions/actions/location/explode/#examples","title":"Examples","text":"<pre><code>explode:\n  breakBlocks: false\n  power: 2\n  at: \"{{ entity.getTargetBlock { maxDistance: 10 } }}\"\n</code></pre>"},{"location":"geary-minecraft/actions/actions/location/particle/","title":"particle","text":""},{"location":"geary-minecraft/actions/actions/location/particle/#examples","title":"Examples","text":"<pre><code>particle:\n  at: \"{{ entity.getLocation }}\"\n  particle: CLOUD\n  offsetY: 1\n  count: 3\n</code></pre>"},{"location":"geary-minecraft/actions/actions/location/smite/","title":"smite","text":""},{"location":"geary-minecraft/actions/actions/location/smite/#examples","title":"Examples","text":"<pre><code>smite:\n  at: \"{{ targetBlock }}\"\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/","title":"Conditions","text":"<p>Conditions are checks performed before running actions. They can be used across various configs, including the action system and spawning system.</p>"},{"location":"geary-minecraft/actions/conditions/#available-conditions","title":"Available conditions","text":""},{"location":"geary-minecraft/actions/conditions/any/chance/","title":"chance","text":""},{"location":"geary-minecraft/actions/conditions/any/chance/#examples","title":"Examples","text":"<pre><code>chance: 0.5\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/any/cooldownsComplete/","title":"cooldownsComplete","text":""},{"location":"geary-minecraft/actions/conditions/any/cooldownsComplete/#examples","title":"Examples","text":"<pre><code>cooldownsComplete: [ \"explosion\" ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/any/mythicConditions/","title":"mythicConditions","text":""},{"location":"geary-minecraft/actions/conditions/any/mythicConditions/#examples","title":"Examples","text":"<pre><code>mythicConditions:\n  - lightlevelfromblocks{l=0}\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/block/","title":"block","text":""},{"location":"geary-minecraft/actions/conditions/block/block/#examples","title":"Examples","text":"<pre><code>block:\n  allow: [ stone, grass_block ]\n</code></pre> <pre><code>block:\n  deny: [ water, lava ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/blockAbove/","title":"blockAbove","text":""},{"location":"geary-minecraft/actions/conditions/block/blockAbove/#examples","title":"Examples","text":"<pre><code>blockAbove:\n  allow: [ stone, grass_block ]\n</code></pre> <pre><code>blockAbove:\n  deny: [ water, lava ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/blockBelow/","title":"blockBelow","text":""},{"location":"geary-minecraft/actions/conditions/block/blockBelow/#examples","title":"Examples","text":"<pre><code>blockBelow:\n  allow: [ stone, grass_block ]\n</code></pre> <pre><code>blockBelow:\n  deny: [ water, lava ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/gap/","title":"gap","text":""},{"location":"geary-minecraft/actions/conditions/block/gap/#examples","title":"Examples","text":"<pre><code>gap: 10..512\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/isSourceLiquid/","title":"isSourceLiquid","text":""},{"location":"geary-minecraft/actions/conditions/block/isSourceLiquid/#examples","title":"Examples","text":"<pre><code>isSourceLiquid: {}\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/block/maxNearby/","title":"maxNearby","text":""},{"location":"geary-minecraft/actions/conditions/block/maxNearby/#examples","title":"Examples","text":"<pre><code>maxNearby:\n  amount: 3\n</code></pre> <pre><code>maxNearby:\n  amount: 2\n  radius: 10\n  types: [ \"mm:myMythicMob\" ]\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/entity/check_entity/","title":"Examples","text":"<pre><code>check.entity:\n  leashed: true\n  inWater: false\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/entity/hasConsumable/","title":"Examples","text":"<pre><code>hasConsumable:\n  type: mineinabyss:flamethrower_fuel\n  amount: 2\n</code></pre>"},{"location":"geary-minecraft/actions/conditions/entity/player/","title":"Examples","text":"<pre><code>check.entity:\n  sneaking: true\n  invisible: false\n</code></pre>"},{"location":"geary-minecraft/actions/events/","title":"Events","text":"<p>Events are triggers for your skills. The serialized tag follows the usual component format, with namespaces optionally imported. These generally bridge Bukkit events and may hold extra info, explore them in the sidebar.</p>"},{"location":"geary-minecraft/actions/events/#entities","title":"Entities","text":"Name Desc onDamaged Entity was damaged by another entity onDamageOther Entity damaged another entity onSheared Entity got sheared onSpawn Entity spawned (for the first time) onDeath Entity died onLoad Entity was loaded (i.e. from spawn or chunk load) onUnload Entity was unloaded from a chunk"},{"location":"geary-minecraft/actions/events/#items","title":"Items","text":"Name Desc itemInteract Item interacts with something itemLeftClick Item left clicked air or block itemLeftClickBlock Item left clicked a block itemRightClick Item right clicked air or block itemRightClickBlock Item right clicked a block itemRightClickEntity Item right clicked an entity itemConsumed Item was consumed, ex. eaten or drunk itemBreak Item broke from low durability itemDrop Item was dropped by a player"},{"location":"geary-minecraft/actions/target-selectors/","title":"Target selectors","text":"<p>Target selectors (defined with the <code>using</code> tag) specify the entity actions run on. Subskills will inherit the target selector of their parent skill, unless they specify their own.</p>"},{"location":"geary-minecraft/actions/target-selectors/#event-targets","title":"Event targets","text":"<p>Events specify their own targets based on involved entities. Since the event is carried through to subskills, they may swap back and forth between involved entities.</p>"},{"location":"geary-minecraft/actions/target-selectors/#variable-targets","title":"Variable targets","text":"<p>Targets can also reference entities via variables (currently only inline). Lists of entities are also supported, and will be iterated over. On the sidebar, you will find some components for reading entities that may be used by target selectors.</p> <p>Example of a list of targets defined as an inline variable:</p> <pre><code>using: { nearbyEntities: { radius: 10 } }\n</code></pre>"},{"location":"geary-minecraft/actions/target-selectors/mob-selectors/","title":"Bukkit entity selectors","text":"<p>These selectors require a Bukkit entity target, ex. nearby entities will find entities near the current Bukkit entity. </p>"},{"location":"geary-minecraft/actions/target-selectors/mob-selectors/#nearby-entities","title":"Nearby entities","text":"<pre><code>nearbyEntities:\n  radius: 10\n</code></pre>"},{"location":"geary-minecraft/actions/variables/","title":"Variables","text":"<p>Variables are supported by certain actions, and let you dynamically read data in skills. Each variable specifies a type, followed by a camelCased name, and may be specified in one of three ways:</p>"},{"location":"geary-minecraft/actions/variables/#inline","title":"Inline","text":"<p>Since all types are just component references, they may be defined like any serializable component:</p> <pre><code>vars:\n  - string name: \"Just a string\"\n  - int age: 42\n  - geary:playSound extinguish:\n      sound: minecraft:entity.generic.extinguish_fire\n</code></pre>"},{"location":"geary-minecraft/actions/variables/#references","title":"References","text":"<p>Variables may reference other variables defined before them, (or soon data stored on entities).</p> <pre><code>vars:\n  - string name: $otherName\n</code></pre>"},{"location":"geary-minecraft/actions/variables/#derived","title":"Derived","text":"<p>Derived variables run an event that reads data on a target. These are useful for getting data from your events. See Derived Variables for a list of options.</p> <pre><code>using: itemHolder\nvars:\n  # Read the location of itemHolder\n  - derived location targetLoc:\n      read.location: { }\n</code></pre>"},{"location":"geary-minecraft/actions/variables/derived-variables/","title":"Derived variables","text":"<p>ABC</p>"},{"location":"geary-minecraft/content-packs/SUMMARY/","title":"SUMMARY","text":"<ul> <li>File structure</li> <li>Commands</li> <li>Items</li> <li>Blocks</li> <li>Mobs</li> <li>Spawning</li> </ul>"},{"location":"geary-minecraft/content-packs/commands/","title":"Commands","text":""},{"location":"geary-minecraft/content-packs/commands/#spawning-mobs-and-items","title":"Spawning mobs and items","text":"<p><code>/geary mobs spawn &lt;mob name&gt; [count]</code> \u2014 Spawn a custom mob</p> <p><code>/geary give &lt;item name&gt; [count]</code> \u2014 Give yourself an item, including custom blocks</p> <p><code>/blocky menu</code> \u2014 Open custom block menu, similar to creative inventory</p>"},{"location":"geary-minecraft/content-packs/commands/#prefabs","title":"Prefabs","text":"<p><code>/geary prefab reload &lt;namespace&gt;:&lt;name&gt;</code> \u2014 Re-read a prefab from disk. It will be updated live, including any instances spawned in the world.</p> <p><code>/geary prefab load &lt;namespace&gt; path/to/file.yml</code> \u2014 Load a file that was not previously loaded by geary.</p>"},{"location":"geary-minecraft/content-packs/file-structure/","title":"File structure","text":"<p>Geary supports loading content from its config folder. We write custom mobs, items, or blocks in config files called prefabs.  When we spawn a mob or create an item, it is an instance of a prefab and inherits all of its components.</p>"},{"location":"geary-minecraft/content-packs/file-structure/#directory-structure","title":"Directory structure","text":"<p>Place Geary config files in <code>plugins/Geary/prefabs/&lt;namespace&gt;</code>, where <code>&lt;namespace&gt;</code> is unique to your project (ex. mineinabyss). Files will be loaded by name regardless of folder structure, for example:</p> <pre><code>Geary/\n\u2514\u2500\u2500 prefabs/\n    \u2514\u2500\u2500 mineinabyss/\n        \u2514\u2500\u2500 items/\n            \u251c\u2500\u2500 drops\n            \u251c\u2500\u2500 equipment\n            \u251c\u2500\u2500 food/\n            \u2502   \u251c\u2500\u2500 cut_meat_cooked.yml\n            \u2502   \u2514\u2500\u2500 cut_meat_raw.yml\n            \u251c\u2500\u2500 materials\n            \u251c\u2500\u2500 misc\n            \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"geary-minecraft/content-packs/file-structure/#writing-a-prefab","title":"Writing a prefab","text":"<p>Prefab files contain a list of components. Geary comes with components that mark your prefab as an item mob, or block. Note that other than these specialized components, there is no difference between any type of prefab, in fact Geary provides many components that can be used identically across items, mobs, or blocks (ex. the <code>observe</code> component in Geary's action system.)</p> <p>In the next few pages we'll explore how to create each kind of prefab, but first we'll explain the common format:</p> <ul> <li>Components are defined by their name, ex. this file defines <code>set.item</code> and <code>resourcepack</code> components: abyssal_snail_gunk.yml<pre><code>set.item:\n  item:\n    type: minecraft:slime_ball\n    itemName: &lt;reset&gt;&lt;#785F34&gt;Abyssal Snail Gunk\n    customModelData: 1\nresourcepack:\n  textures: mineinabyss:item/creature_drops/abyssal_snail_gunk\n</code></pre></li> <li> <p>Any components not provided by geary must include a namespace, ex. <code>blocky:sound</code>: charcoal_sand_ore.yml<pre><code>set.block:\n    blockType: NOTEBLOCK\n    blockId: 1\nblocky:sound:\n    placeSound: minecraft:block.amethyst_block.place\n    breakSound: minecraft:block.amethyst_block.break\n</code></pre></p> </li> <li> <p>Tip</p> <p>We provide a json schema here for automatic code completion, our <code>server-config</code> project shows how to set this up in IntelliJ as well as GitHub's web editor using the YAML plugin.</p> </li> </ul>"},{"location":"geary-minecraft/content-packs/items/","title":"Creating items","text":"<p>Item prefabs are defined by the <code>set.item</code> component with a Serializable Item. By far the best way to see all configuration options is to use our JSON schema, as shown in File structure, but we'll go over common use-cases.</p>"},{"location":"geary-minecraft/content-packs/items/#examples","title":"Examples","text":""},{"location":"geary-minecraft/content-packs/items/#common-options","title":"Common options","text":"<p>This item shows off some commonly used options for custom items</p> <pre><code>set.item:\n  item:\n    type: stone\n    itemName: &lt;white&gt;Custom Item\n    lore:\n      - &lt;red&gt;A fancy lore line\n    customModelData: 100\n    maxStackSize: 99\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/#custom-food","title":"Custom food","text":"<p>We support Minecraft's food component, which can apply custom effects, eating time, and more:</p> <pre><code>set.item:\n  item:\n    type: sand\n    food:\n      saturation: 1.8\n      nutrition: 3\n      usingConvertsTo: minecraft:red_sand\n      effects:\n        - probability: 0.35\n          effect:\n            type: minecraft:hunger\n            duration: 10s\n            amplifier: 2\n            isAmbient: true\n            hasParticles: true\n            hasIcon: true\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/#tools","title":"Tools","text":"<p>Use Minecraft's tool component to create tools with custom mining speeds:</p> <pre><code>set.item:\n  item:\n    itemName: Charcoal Sand Sickle\n    type: minecraft:wooden_hoe\n    customModelData: 7\n    durability: 3000\n    tool:\n      rules:\n        - blockTypes:\n            - \"minecraft:leaves\"\n          speed: 8.0\n          correctForDrops: true\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Creating items</li> <li>Resourcepack</li> <li>Custom recipes</li> <li>Serializable Item</li> </ul>"},{"location":"geary-minecraft/content-packs/items/recipes/","title":"Custom recipes","text":"<p>Geary provides an extensive recipe system for custom or vanilla items.</p>"},{"location":"geary-minecraft/content-packs/items/recipes/#create-recipes","title":"Create recipes","text":"<p>Create any kind of recipe for an item, all types listed below.</p> <p>If the recipe is defined in the item prefab itself, <code>result</code> does not need to be specified, the item will be the result.</p> <pre><code>set.recipes:\n  recipes: # (1)!\n    - type: shaped\n      ...\n  discoverRecipes: true # (2)!\n  group: \"\" # (3)!\n  removeRecipes: [] # (4)!\n  result: ... # (5)!\n</code></pre> <ol> <li>List of recipes, see available types below.</li> <li>Default <code>false</code>, Whether to unlock the recipe automatically when a player joins the server</li> <li>Default empty, set the group of this recipe. Recipes with the same group may be grouped together when displayed in the client</li> <li>Optional, a list of existing recipes to remove (ex. if migrating from one recipe to a new one)</li> <li>A Serializable Item, or don't pass to use this prefab's <code>set.item</code></li> </ol>"},{"location":"geary-minecraft/content-packs/items/recipes/#set-potionmixes","title":"Set potionmixes","text":"<pre><code>set.potionMixes:\n  potionmixes: # (1)!\n    - input: ... \n      ingredient: { type: sugar }\n  result: ... # (2)!\n</code></pre> <ol> <li>List of potion mixes, as defined below</li> <li>A Serializable Item, or don't pass to use this prefab's <code>set.item</code></li> </ol>"},{"location":"geary-minecraft/content-packs/items/recipes/#recipe-types","title":"Recipe types","text":""},{"location":"geary-minecraft/content-packs/items/recipes/#shaped","title":"Shaped","text":"<p>Uses keys to define Serializable Items as ingredients. These keys can be used to describe a configuration as below</p> <pre><code>- type: shaped\n  items:\n    M: { type: gold_ingot }\n    S: { type: stick }\n  configuration: |-\n    | MM|\n    | SM|\n    |S  |\n</code></pre> <p>A smaller size can also be used for the configuration, ex:</p> <pre><code>configuration: |-\n  |MM|\n  |SM|\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#shapeless","title":"Shapeless","text":"<p>Takes a list of Serializable Items as ingredients, they may be placed in any shape.</p> <pre><code>- type: shapeless\n  items:\n    - type: gold_ingot\n    - prefab: myplugin:custom_item\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#cooking","title":"Cooking","text":"<p>There are several options for cooking recipes,  <code>furance</code>, <code>blasting</code>, <code>campfire</code>, <code>smoker</code>. The input is a Serializable Item that will be consumed.</p> <pre><code>- type: furnace\n  input: { prefab: mineinabyss:ashimite_meat_raw }\n  experience: 1f\n  cookingTime: 100\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#stonecutting","title":"Stonecutting","text":"<p>Input is a Serializable Item that will be consumed by the stonecutter.</p> <pre><code>- type: stonecutting\n  input: { type: stone }\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#smithing","title":"Smithing","text":""},{"location":"geary-minecraft/content-packs/items/recipes/#transform","title":"Transform","text":"<p>All inputs are Serializable Item. template, input, addition are ordered left to right in the smithing table. Ex. we have a template for a custom netherite upgrade:</p> <pre><code>- type: smithing_transform\n  template: { type: netherite_upgrade_smithing_template }\n  input: { prefab: mineinabyss:diamond_sickle }\n  addition: { type: netherite_ingot }\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/recipes/#trim","title":"Trim","text":""},{"location":"geary-minecraft/content-packs/items/recipes/#potionmix","title":"Potionmix","text":"<p>All entries are Serializable Items, the input is the potion being brewed, and ingredient is the ingredient being added on top. If input is not specified, will use a water bottle.</p> <pre><code>- type: potionmix\n  input: ...\n  ingredient: { type: sugar }\n</code></pre>"},{"location":"geary-minecraft/content-packs/items/resourcepack/","title":"Resourcepack","text":"<p>Geary provides a <code>resourcepack</code> component that will automatically generate custom item json files for you.</p> <p>First, enable resourcepack generation in Geary's <code>config.yml</code>:</p> <pre><code>resourcePack:\n  generate: true\n  # The path to generate the pack to from `plugins/Geary`\n  # Adding .zip to path will export as a zip instead of directory\n  outputPath: resourcepack.zip\n  # Points to a resourcepack in zip or directory format to merge into Geary's pack\n  includedPackPath: template_pack\n</code></pre> <p>Add your resourcepack files in <code>plugins/Geary/template_pack</code>, notably you only need to add textures for custom items:</p> <pre><code>template_pack/\n\u2514\u2500\u2500 assets/\n    \u2514\u2500\u2500 mineinabyss/\n        \u2514\u2500\u2500 textures/\n            \u2514\u2500\u2500 item/\n                \u2514\u2500\u2500 my_texture.png\n</code></pre> <p>Use the resourcepack component on your item:</p> <pre><code>set.item:\n  item:\n    type: stone\n    customModelData: 100\nresourcepack:\n  textures: my_addon:item/my_texture\n</code></pre> <p>This will automatically generate a <code>resourcepack.zip</code> with the right customModelData pointing to your texture. You can manually serve this file with your server, or use a plugin like Packy to automatically combine generated packs for you.</p>"},{"location":"geary-minecraft/content-packs/items/serializable-item/","title":"Serializable Item","text":"<p>We often need to reference an item in Geary, usually through our own SerializableItemStack. The item may inherit from other plugins or be configured in-place (ex referencing another prefab in a recipe, or defining the item itself.)</p> <p>All properties are optional, setting a property will override the vanilla value, below is an example of all properties:</p> <pre><code># You may use a vanilla item or inherit from another item system \ntype: stone # (1)!\nprefab: &lt;string&gt; # (2)!\ncrucibleItem: &lt;string&gt;\noraxenItem: &lt;string&gt;\nitemsadderItem: &lt;string&gt;\n\n# Override item properties\namount: 2\ncustomModelData: 42\ndisplayName: \"&lt;bold&gt;&lt;red&gt;Fancy stone\" # (3)!\nlore:\n  - \"Lore line 1\"\n  - \"&lt;red&gt;Formatted line 2\"\nunbreakable: false\ndamage: 0\nenchantments:\n  - enchant: minecraft:sharpness # (4)!\n    level: 3\nitemFlags: [ HIDE_ENCHANTS ] # (5)!\nattributeModifiers:\n  - attribute: GENERIC_ATTACK_DAMAGE # (6)!\n    modifier:\n      name: customAttribute\n      amount: 1.0\n      operation: ADD_NUMBER # (7)!\npotionData:\n  type: REGEN # (8)!\n  extended: true\n  upgraded: true\ncolor: '#fffff' # (9)!\nknowledgeBookRecipes: [ \"minecraft:gold_ingot_from_nuggets\" ] # (10)!\n</code></pre> <ol> <li>Vanilla item type, may be prefixed with <code>minecraft:</code> or written in all caps, ex: <code>minecraft:stone</code> or <code>STONE</code></li> <li>Geary prefab to read item off of. Must itself have a <code>geary:set.item</code> component</li> <li>All text lines support MiniMessage formatting</li> <li>Minecraft namespaced key for an enchant.</li> <li>List of ItemFlag values</li> <li>Attribute to modify</li> <li>Type of operation (add, multiple, etc), see AttributeModifier.Operation</li> <li>Potion type, see PotionType</li> <li>Potion color, in the form <code>#RRGGBB</code> or <code>r, g, b</code> with 0-255 values</li> <li>List of recipes to unlock in a knowledge book, use Minecraft namespaced keys for recipes.</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/","title":"Creating mobs","text":"<p>For mobs to be spawnable by Geary, the prefab must have a component that provides a Minecraft entity.</p>"},{"location":"geary-minecraft/content-packs/mobs/#vanilla-entity-type","title":"Vanilla entity type","text":"<p>The simplest component, just picks a type registered in Minecraft. This includes any custom mobs that may be registered via NMS. <pre><code>set.entityType: minecraft:slime\n</code></pre></p>"},{"location":"geary-minecraft/content-packs/mobs/#mythicmobs","title":"MythicMobs","text":"<pre><code>set.mythicMob: &lt;mythicMobKey&gt;\n</code></pre> <p>Where <code>&lt;mythicMobKey&gt;</code> is the root key in your MythicMob mob file, ex:</p> <pre><code>MyCustomPig:\n  Type: PIG\n  Health: 20\n  Options:\n    ...\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/#mythicmobs-integration","title":"MythicMobs integration","text":"<p>Alternatively, you may create and manage your mobs with MythicMobs and let them inherit any prefab using our prefabs skill:</p> <pre><code>MyCustomPig:\n  Skills:\n    - prefabs{p=mineinabyss:my_prefab} @self ~onSpawnOrLoad\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Creating mobs</li> <li>Components</li> </ul>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/","title":"Overrides","text":"<p>Components that replace vanilla behaviour with custom ones, often reimplemented by us.</p>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#any-mob","title":"Any mob","text":""},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#death-loot","title":"Death Loot","text":"<p>Items and exp to drop on a mob's death <pre><code>deathLoot:\n  exp: 10..20\n  deathCommands: [ \"say Hi\" ] # (1)!\n  drops: # (2)!\n    - item: { type: \"apple\" }\n      cooked: { type: \"golden_apple\" } # (4)!\n      cookExp: ... # (5)!\n      cookTime: ... # (6)!\n      amount: 1..2\n      dropChance: 0.5\n  ignoredCauses: [ SUFFOCATION ] # (3)!\n</code></pre></p> <ol> <li>List of commands to run on death</li> <li>A list of items to drop</li> <li>DamageCause, Do not drop items when entity dies of this cause</li> <li>Item to drop if using fire aspect on mob</li> <li>Default <code>0</code>, Amount of exp for cooking</li> <li>Default <code>200</code>. Amount of time cooking takes</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#sounds","title":"Sounds","text":"<p>Custom sound system, can play idle sounds and when interacting with entity, all optional</p> <pre><code>sounds:\n  step: &lt;Sound&gt;\n  ambient: &lt;Sound&gt;\n  death: &lt;Sound&gt;\n  hurt: &lt;Sound&gt;\n  splash: &lt;Sound&gt;\n  swim: &lt;Sound&gt;\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#sound","title":"Sound","text":"<pre><code>ambient:\n    sound: \"minecraft:entity.pig.ambient\" # (1)!\n    volume: ... # (2)!\n    pitch: ... # (3)!\n    pitchRange: ... # (4)!\n    category: ... # (5)!\n</code></pre> <ol> <li>Sound to play, anything in <code>/playsound</code> works here</li> <li>Default <code>1.0</code>, Volume of the sound</li> <li>Default <code>1.0</code>, Pitch of the sonud </li> <li>Default <code>0.2</code>, range pitch can go up or down by randomly</li> <li>Default <code>MASTER</code>, Any of SoundCategory</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#display-name","title":"Display name","text":"<p>Name to display in chat when killed by entity.</p> <pre><code>displayName: \"&lt;red&gt;Scary Pig\" # (1)!\n</code></pre> <ol> <li>Any string, parsed with MiniMessage</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/overrides/#bucketable","title":"Bucketable","text":"<p>Allows entity to be picked up by a bucket</p> <pre><code>bucketable:\n   bucketLiquidRequired: WATER # (1)!\n   bucketItem: { prefab: myplugin:custom_bucket } # (2)!\n</code></pre> <ol> <li>Type of bucket player needs to be holding to pick up mob (WATER, LAVA)</li> <li>The item to give when bucketing the mob</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/","title":"Prevent","text":"<p>Components that override vanilla behaviour, most of these will listen to events and cancel them.</p>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#any-entity","title":"Any entity","text":""},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#interaction","title":"Interaction","text":"<p>Prevents different types of interaction. If passed list is empty, will prevent all.</p> <pre><code>prevent.interaction: [ ATTACK ] # (1)!\n</code></pre> <ol> <li>Available options: <code>ATTACK</code>, <code>RIGHT_CLICK</code></li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#regeneration","title":"Regeneration","text":"<p>Prevents different types of regeneration events. If passed list is empty, will prevent all.</p> <pre><code>prevent.regeneration: [ REGEN, MAGIC ] # (1)!\n</code></pre> <ol> <li>Available options: any of EntityRegainHealthEvent.RegainReason\"</li> </ol>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#prevent-riding","title":"Prevent riding","text":"<p>Cancels VehicleEnterEvent on this entity.</p> <pre><code>prevent.riding: true\n</code></pre>"},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#animals","title":"Animals","text":""},{"location":"geary-minecraft/content-packs/mobs/components/prevent/#breeding","title":"Breeding","text":"<p>Cancels EntityEnterLoveModeEvent and EntityBreedEvent.</p> <pre><code>prevent.breeding: { }\n</code></pre>"},{"location":"geary-minecraft/content-packs/spawning/","title":"Creating spawns","text":"<p>Spawns are defined under <code>plugins/Geary/spawns/&lt;namespace&gt;</code>. Each file can contain multiple spawns, and within one file, entries may <code>inherit</code> other entries.</p> <p>Tip</p> <p>You can see a list of conditions for spawns at Action system conditions, any block condition will work here, as well as <code>mythicConditions</code> for conditions that aren't yet implemented by Geary.</p> <p>A quick overview of most features by example:</p> <pre><code>my_template:\n  position: GROUND # We support GROUND, AIR, WATER\n  priority: 1 # When multiple spawns are available, roll a weighted die with this value\n  regions: [ layerone ] # WorldGuard regions to limit spawns to\n  conditions: # Geary conditions from the action &amp; observer system\n    - mythicConditions:\n        - lightlevelfromblocks{l=0}\n    - maxNearby:\n        amount: 3\n  amount: 2-3 # Random range of mobs to spawn in a group\n  spread: 7 # The horizontal spread for them\n  ySpread: 1 # And the vertical spread\n\n# Inherits all tags from the other config\nmy_mob_spawn:\n  inherit: my_template\n  type: mm:my_mythic_mob # Specifies a MythicMob to spawn, swap out mm for a namespace for Geary mobs\n  conditions:\n    - $inherit # Since we're overriding the `conditions` block, we need to manually specify we want to merge the lists\n    - $remove maxNearby # Don't inherit maxNearby\n    - blockBelow:\n         allow: [ grass_block ]\n\nmy_mob_spawn_2: ...\n</code></pre>"},{"location":"geary-minecraft/content-packs/spawning/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Creating spawns</li> <li>Technical overview</li> </ul>"},{"location":"geary-minecraft/content-packs/spawning/overview/","title":"Technical overview","text":"<p>Geary-papermc provides a spawning system, with integrations for MythicMobs mobs. This page goes over exactly how the spawning system picks blocks and entities to spawn.</p>"},{"location":"geary-minecraft/content-packs/spawning/overview/#technical-overview","title":"Technical overview","text":"<p>The system runs each tick, on all players on the server with the following logic:</p>"},{"location":"geary-minecraft/content-packs/spawning/overview/#location-picking","title":"Location picking","text":"<ul> <li>Find a position minDistance to maxDistance horizontally away from the player, as well as maxVerticalDistance above or below the player.<ul> <li>Occasionally bias towards a GROUND location by getting the highest solid block in the allowed vertical range.</li> </ul> </li> <li>Ensure this location is at least minDistance away from ALL other players.</li> <li>Categorize the location into one of the following spawn position types: GROUND, IN_BLOCK, AIR, WATER, LAVA.</li> </ul>"},{"location":"geary-minecraft/content-packs/spawning/overview/#spawn-picking","title":"Spawn picking","text":"<ul> <li>Check all WorldGuard regions at the chosen location and pick any spawns matching these regions.</li> <li>Filter these spawns by the block's spawn position.</li> <li>Calculate nearby mob caps and filter out any spawns whose types exceed these caps.</li> <li>Use a weighted random selection to pick a spawn from the remaining spawns, based on the spawn's <code>priority</code>.</li> <li>Ensure its additional conditions are met. Don't retry if the spawn is invalid, since we want lower priority to mean less common spawns</li> </ul>"},{"location":"geary-minecraft/content-packs/spawning/overview/#spawn-spread","title":"Spawn spread","text":"<ul> <li>For spawns with a spread or ySpread defined, use a normal distribution with standard deviation equal to the spread to pick a new location, if the location's position type is the same as the spawn's, try to spawn there.</li> <li>For any spawn that would cause a mob to overlap with a block's hitbox, leading to suffocation, attempt to move the entity up to avoid this, removing the entity if no valid spawn position is found.</li> </ul>"},{"location":"geary-minecraft/developers/","title":"Setup","text":"<p>Add geary-papermc to your gradle project:</p> <pre><code>repositories {\n    maven(\"https://repo.mineinabyss.com/releases\")\n}\n\ndependencies {\n    implementation(\"com.mineinabyss:geary-papermc:$gearyVersion\")\n}\n</code></pre> <p>Note</p> <p>Depend on <code>geary-papermc</code> to get all supported addons automatically, or <code>geary-papermc-core</code> for just the API.</p>"},{"location":"geary-minecraft/developers/#initialize-your-plugin","title":"Initialize your plugin","text":"<p>The Geary-papermc plugin initializes Geary with some useful addons like prefabs and serialization. Other plugins can further configure Geary with their own addons on server startup. Learn more about creating configurable addons here</p> <p>Create a Geary addon anywhere in your code, we recommend a top level variable:</p> <pre><code>val MyCustomAddon = createAddon&lt;Unit&gt;(\"My plugin\", configuration = {\n    // Install and configure any other addons you like here\n    autoscan(classLoader, \"my.plugin.package\") {\n        // Register all serializable classes for use in prefabs/persisting data\n        components()\n    }\n    install(SomeOtherAddon)\n}) {\n    // Use this block for logic that should run after everything is configured,\n    // this includes registering system, creating any custom entities, or startup logic\n\n    systems {\n        yourSystemHere()\n    }\n\n    onStart {\n        // Your startup logic\n    }\n}\n</code></pre> <p>Install your addon in your plugin's <code>onLoad()</code> function like so:</p> <pre><code>override fun onLoad() {\n    gearyPaper.configure {\n        install(MyCustomAddon)\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Setup</li> <li>Loading prefabs</li> <li>Persistent data</li> <li>Tracked entities</li> </ul>"},{"location":"geary-minecraft/developers/persistentdatacontainer/","title":"Persistent data","text":"<p>The module <code>geary-papermc-datastore</code> (included in <code>geary-papermc</code>) provides functions for encoding and decoding serializable classes (using kotlinx.serialization) for any persistent data container.</p> <p>This may can be useful for types that aren't supported in geary, but which do have a PDC (ex chunks), or for users that just want to read/write data, and not use a full ECS.</p>"},{"location":"geary-minecraft/developers/persistentdatacontainer/#syntax","title":"Syntax","text":"<p>Persisting components must be marked <code>@Serializable</code> and have a serial name in the form of <code>@SerialName(\"namespace:key\")</code>. The SerialName will be used as a key in the PDC.</p> <pre><code>@Serializable\n@SerialName(\"myplugin:money\")\nclass Money(amount: Int)\n\nval pdc: PersistentDataContainer\n\npdc.encode(Money(100))\npdc.decode&lt;Money&gt;()\n</code></pre>"},{"location":"geary-minecraft/developers/prefabs/","title":"Loading prefabs","text":"<p>Geary uses prefabs to define custom mob, item, or block types. These are just entities with a unique key, which we use to persist information ingame. For instance, items and mobs store a prefab key in their persistent data container, and blocks let you directly access a prefab based on their blockdata.</p> <p>Geary will automatically load prefabs under <code>plugins/Geary/&lt;namespace&gt;/...</code>. However, you may want your configs to be kept in your own plugin folder instead, or package them directly with your jar file. For this, use the <code>Prefabs</code> addon as shown below.</p>"},{"location":"geary-minecraft/developers/prefabs/#load-prefabs-from-code","title":"Load prefabs from code","text":"<p>You may create prefabs from arbitrary entities, the prefabs addon provides some helper functions for this:</p> <pre><code>namespace(\"my_namespace\") {\n    prefabs {\n        create(\n            // creates prefab with key my_namespace:name\n            \"name\" to geary.entity {\n                set(MyCustomData())\n            },\n            ...\n        )\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/prefabs/#load-prefabs-from-your-jar-resources","title":"Load prefabs from your jar resources","text":"<p>Plugins can load prefabs from their jar's resources</p> <pre><code>namespace(\"my_namespace\") {\n    prefabs {\n        // We pass a reference to our plugin class to use the correct classLoader\n        fromJarResources(MyPlugin::class, \"prefab1.yml\", \"folder/prefab2.yml\")\n\n        // You can also load all prefabs inside a folder, including subfolders\n        fromJarResourceDirectory(MyPlugin::class, \"prefabs\")\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/prefabs/#load-prefabs-from-files","title":"Load prefabs from files","text":"<pre><code>namespace(\"my_namespace\") {\n    prefabs {\n        // Load specific prefab files\n        fromFiles(dataFolder.toPath() / \"my-prefab.yml\", ...)\n\n        // Load all prefabs in a folder on the filesystem\n        fromDirectory(dataFolder.toPath() / \"prefabs\")\n    }\n}\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/items/","title":"Items","text":"<p>Geary provides item tracking in player inventories. For any other case, you may use the item's PDC to read/write data, but no entity will be tracked in Geary.</p>"},{"location":"geary-minecraft/developers/tracked-entities/items/#tracking","title":"Tracking","text":"<p>The player inventory will automatically load items with serialized prefabs. If an item is removed, the entity gets removed with it.</p>"},{"location":"geary-minecraft/developers/tracked-entities/items/#getting-an-item-entity","title":"Getting an item entity","text":""},{"location":"geary-minecraft/developers/tracked-entities/items/#gearyinventory","title":"GearyInventory","text":"<p>GearyInventory provides functions similar to <code>player.inventory</code>, but they return GearyEntity.</p> <pre><code>val player: Player\n\nval inv = player.inventory.toGeary()\n\ninv.itemInMainHand\ninv.get(EquipmentSlot.HEAD)\ninv.itemOnCursor // only works in survival mode\ninv.get(10)\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/items/#modifying-an-itemstack","title":"Modifying an ItemStack","text":"<pre><code>val gearyItem: GearyEntity\n\n// changes are reflected in inventory\ngearyItem.get&lt;ItemStack&gt;().amount = 10\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/mobs/","title":"Mobs","text":"<p>Note</p> <p>To avoid confusion, Geary comes with a <code>BukkitEntity</code> typealias for Bukkit's <code>Entity</code> interface.</p> <p>All bukkit entities get a geary entity created for them when spawned (and removed when despawned.)</p>"},{"location":"geary-minecraft/developers/tracked-entities/mobs/#entity-syntax","title":"Entity syntax","text":"<pre><code>val pig: Pig\n\n// Get the associated geary entity\nval gearyPig = pig.toGeary()\npig.set(SomeData())\n\n// Get the bukkit entity using components\npig.get&lt;BukkitEntity&gt;()\npig.toBukkit() // equivalent\n\n// each entity gets both the BukkitEntity component, and the specific instance\npig.get&lt;Pig&gt;()\npig.toBukkit&lt;Pig&gt;() // attempts to cast get&lt;BukkitEntity&gt;()\n</code></pre>"},{"location":"geary-minecraft/developers/tracked-entities/mobs/#persisting-data","title":"Persisting data","text":"<p>Any persisting components will be saved and loaded to the mob's persistent data container on NBT save/load. </p> <pre><code>@Serializable\n@SerialName(\"myplugin:owner\")\nclass Owner(\n    val uuid: @SerializableWith(UUIDSerializer::class) UUID\n)\n\nval pig: Pig\nval player: Player\n\npig.setPersisting(Owner(player.uniqueId))\n</code></pre>"},{"location":"idofront/","title":"Idofront","text":"<p> GitHub</p> <p>Idofront is a set of modules we share between plugins. It includes helpful Minecraft extensions, gradle conventions, and more.</p> <p>To use it in your plugins see the GitHub page for depending on Idofront in your project, download the latest jar and include it in your <code>paper-plugin.yml</code>:</p> <pre><code>dependencies:\n  server:\n    Idofront:\n      required: true\n      load: BEFORE\n      join-classpath: true\n</code></pre>"},{"location":"idofront/SUMMARY/","title":"SUMMARY","text":"<ul> <li>About</li> <li>*.md</li> <li>Util</li> <li>Gradle</li> </ul>"},{"location":"idofront/command-dsl/","title":"Commands","text":"<p>Idofront provides a clean way of creating custom command structures through a DSL. This feature is currently very experimental.</p>"},{"location":"idofront/command-dsl/#register-your-command-executor","title":"Register your command executor","text":"<p>Implement <code>IdofrontCommandExecutor</code> It is recommended to create a singleton object for managing your commands. <pre><code>object MyCommandExecutor: IdofrontCommandExecutor() {\n    override val commands: CommandHolder = commands(MyPlugin) { //MyPlugin is a reference to your main plugin instance\n        //Command DSL ishere\n    }\n}\n\n...\n\noverride fun onEnable(){\n    MyCommandExecutor //instantiate the singleton\n}\n</code></pre> That's it! The command registration is done for you. You do however currently need to add your commands into <code>plugin.yml</code> like you normally would, but hopefully this won't be necessary in the future.</p>"},{"location":"idofront/command-dsl/#creating-commands","title":"Creating commands","text":"<p>Within your <code>commands</code> block, you may create new commands as follows:</p> <pre><code>command(\"basicCommand\"){\n}\n\ncommand(\"anotherCommand\", \"alias\", \"anotherAlias\", desc= \"Short description\") {\n}\n\n//or alternatively, which will be the preferred format in this guide\n\n\"basicCommand\" {\n}\n\n(\"anotherCommand\" / \"alias\" / \"anotherAlias\")(desc= \"Short description\") {\n}\n\"\"\n</code></pre> <p>This will allow players to use <code>/basicCommand</code>, and <code>/anotherCommand</code> (or <code>/alias</code>, <code>/anotherAlias</code>) A malformated command will display relevant help information, such as subcommands or missing arguments. <code>/basicCommand ?</code> will display the full help message with description, aliases, etc...</p>"},{"location":"idofront/command-dsl/#subcommands","title":"Subcommands","text":"<p>Let's start building towards an example. We have a plugin with a main command, and multiple subcommands which do different things. We want to be able to do: <code>/myplugin version</code> - To get the plugin version <code>/myplugin giveApple &lt;amount (default 1)&gt; &lt;player (default to self)&gt;</code> - To give an apple to a certain player</p> <p>We can simply nest subcommands within other commands (indefinitely) to create a structure:</p> <pre><code>\"myplugin\" {\n    \"version\" { ... }\n    \"giveApple\" { ... }\n}\n</code></pre>"},{"location":"idofront/command-dsl/#actions","title":"Actions","text":"<p>To actually run things with a command, we must specify actions. Actions, like the <code>playerAction</code> may have conditions that need to be met before they are run. If any condition ever fails, the command will stop right there, and an error will be sent to the sender. Multiple actions may exist in a command, but upon failure, no other actions will be executed.</p> <p>If an action succeeds, it will execute the code inside, plus give some extra contextual information, such as the sender.</p> <p>Let's use the default <code>action</code> for our version, which gives us access to a sender, and <code>playerAction</code> which ensures the sender is a player, and gives us a player to work with:</p> <pre><code>\"myplugin\" {\n    \"version\" {\n        action {\n            sender.info(\"Plugin version: ${MyPlugin.version}\")\n        }\n    }\n    \"giveApple\" {\n        playerAction {\n            player.inventory.addItem(ItemStack(Material.APPLE, 1))\n        }\n    }\n}\n</code></pre>"},{"location":"idofront/command-dsl/#arguments","title":"Arguments","text":"<p>Now we need to let players pass an amount for the item.</p> <p>Arguments are done through delegates, there are some methods for primitives, but you may also create custom arguments:</p> <pre><code>\"giveApple\" {\n    val amount by intArg { default = 1 }\n    playerAction {\n        player.inventory.addItem(ItemStack(Material.APPLE, amount))\n    }\n}\n</code></pre> <p>And that's it! If you have multiple arguments, they will be required in that order. You may also customize some other things, like the error message within <code>intArg { }</code>. You may even use mutable properties.</p> <p>Default just means the argument may be omitted. It doesn't do much if a default argument is followed by a mandated one.</p>"},{"location":"idofront/command-dsl/#limiting-argument-visibility","title":"Limiting argument visibility","text":"<p>The general rule is, if you have access to an argument, it will be required in that command. This means, while you may share the same arguments between several subcommands, any commands below will also require that argument to be passed (the only limitation is that there cannot be any root level arguments yet).</p> <p>To fix this, a <code>commandGroup</code> block exists, which does nothing but limit argument visibility:</p> <pre><code>commandGroup {\n    val amount by intArg()\n    //both commands below will require the \"amount\" to be passed\n    \"one\" { ... }\n    \"two\" { ... }\n}\n//no arguments will be required here, because we can't access any in our code!\n\"noArgs\" { ... }\n</code></pre>"},{"location":"idofront/command-dsl/#conclusion","title":"Conclusion","text":"<p>There are some more features sprinkled into the plugin, but many might disappear. I'm more confident the DSL will remain more or less similar going into the future, but be warned that some refactors may happen, and some things may change.</p>"},{"location":"idofront/command-dsl/#future-plans","title":"Future plans","text":"<p>The current system also doesn't build any structure at startup, so it's unaware of things like arguments of subcommands, or subcommands of subcommands. Everything is evaluated on-the-go, except root level commands, since those need to be registered upon startup (this is why we can't currently have root level arguments). The biggest thing stopping a structure from being generated upon startup is arguments. While it is possible to get a reference to the object the delegate is being called from (and thus have separate instances of each argument in a map), this does not work for lambdas, which return null as the reference. Perhaps it is possible to sidestep this with <code>inline</code> functions, thought I have not tried it yet.</p>"},{"location":"idofront/config/","title":"Config","text":"<p>Idofront-config lets you easily define a config using kotlinx.serialization, supporting yaml, json, and other formats automatically.</p>"},{"location":"idofront/config/#define-a-serializable-config-class","title":"Define a serializable config class","text":"<pre><code>@Serializable\nclass ExampleConfig(\n    val cooldown: Int,\n    val locations: List&lt;String&gt;,\n)\n</code></pre> <p>Tip</p> <p>Remember you can nest serializable classes to organize your config.</p>"},{"location":"idofront/config/#define-a-config","title":"Define a config","text":"<p>Use the config builder to define a config during program startup. This will automatically build and read the config for you.</p> <pre><code>config&lt;ExampleConfig&gt;(fileName = \"config\") {\n    // Extra config options go into the config block here\n}\n</code></pre> <p>Note</p> <p>Notice, we did not specify a file type in our file name. Idofront will look for all supported file types until it finds a valid extension.</p>"},{"location":"idofront/config/#define-input-source","title":"Define input source","text":"<p>Within our config block, we must specify one source for the file, here is a list of supported options:</p> <ul> <li><code>fromPath(path: Path)</code> Loads the config from a path without extension.</li> <li><code>fromPluginPath(relativePath: Path, loadDefault: Boolean)</code> Loads a config relative to the current plugin's config folder, if loadDefault is true, will also load from the jar's resources if no config file exists.</li> <li><code>fromInputStream(getInputStream: (ext: String) -&gt; InputStream?)</code> Given an extension, loads arbitrary input.</li> </ul>"},{"location":"idofront/config/#serialization-options","title":"Serialization options","text":""},{"location":"idofront/config/#shared-serializers-module","title":"Shared serializers module","text":"<p>Specifies a serializers module, shared across different config types.</p> <pre><code>serializersModule {\n    // Start defining options like polymorphic serialization here\n}\n</code></pre>"},{"location":"idofront/config/#formats","title":"Formats","text":"<p>You may add or override config types by extension using the <code>formats</code> block. You should use the passed module if you want your config to use the shared module.</p> <pre><code>formats { module -&gt;\n    mapOf(\"yml\" to Yaml(serializersModule = module, ...))\n}\n</code></pre>"},{"location":"idofront/config/#example","title":"Example","text":"<pre><code>config&lt;ExampleConfig&gt;(fileName = \"config\") {\n    fromPluginPath(loadDefault = true)\n\n    serializersModule {\n        polymorphic(SomeClass::class) {\n            subclass(...)\n        }\n        include(someOtherModule)\n    }\n    mergeOnFail()\n}\n</code></pre> <p>This will load a file from the plugin config called <code>config.&lt;ext&gt;</code>. We can add a file: <code>resources/config.yml</code> in our project so that the loadDefault option will load it when a config file doesn't already exist.</p>"},{"location":"idofront/nms/","title":"NMS","text":"<pre><code>implementation(\"com.mineinabyss:idofront-nms:&lt;version&gt;\")\n</code></pre>"},{"location":"idofront/nms/#conversions","title":"Conversions","text":"<p>We provide <code>toBukkit</code> and <code>toNMS</code> extension functions for some common NMS types, as well as typealiases starting with NMS (ex <code>NMSItemStack</code>.)</p> <p>Classes include: Entity, Player, World, Inventory, ItemStack</p> <p>Example: <pre><code>bukkitEntity.toNMS() // returns NMSEntity\nnmsEntity.toBukkit() // returns BukkitEntity\n</code></pre></p>"},{"location":"idofront/nms/#wrappedpdc","title":"WrappedPDC","text":"<p>A persistent data container (PDC) implementation that wraps a <code>CompoundTag</code>.</p>"},{"location":"idofront/nms/#fast-item-pdc","title":"Fast Item PDC","text":"<p>We include an extension <code>ItemStack.fastPDC</code> which will bypass bukkit's meta cloning that adds a lot of overhead when dealing with big PDCs and takes the nbt directly from NMS.</p>"},{"location":"idofront/serialization/","title":"Serialization","text":"<p>Idofront adds serializers for many data types</p>"},{"location":"idofront/serialization/#usage","title":"Usage","text":"<p>Create a serializable class with kotlinx.serialization, then set the serializer for the property you need:</p> <pre><code>@Serializable\nclass Something(\n    @Serializable(with = LocationSerializer::class)\n    val location: Location\n)\n</code></pre> <p>Or declare the serializer once at the top of the file: <pre><code>@file:UseSerializers(UUIDSerializer::class)\n\n...\n\n@Serializable\nclass Data(\n    val uuid: UUID\n)\n</code></pre></p>"},{"location":"idofront/serialization/#list-of-supported-classes","title":"List of supported classes","text":"<ul> <li>Recipes (through wrapper classes <code>SerializableRecipe</code> and subclasses of <code>SerializableRecipeIngredients</code>)</li> <li>BossBar</li> <li>ItemStack (full support, not meant for user readability, see SerializableItemStack below)</li> <li>Location</li> <li>Component (via <code>MiniMessageSerializer</code>)</li> <li>PotionEffect</li> <li>UUID</li> <li>Vector</li> <li>World</li> <li>Kotlin Duration (see below)</li> </ul>"},{"location":"idofront/serialization/#serializableitemstack","title":"SerializableItemStack","text":"<p>Lets you define items cleanly in config, then convert them to a bukkit ItemStack. Also supports Looty prefabs.</p>"},{"location":"idofront/serialization/#recipes","title":"Recipes","text":"<p>Example YML from using <code>SerializableRecipe</code> <pre><code>recipe:\n  key: \"plugin:some_recipe\"\n  ingredients:\n    - !&lt;shaped&gt;\n      items:\n        G: # SerializableItemStack\n          type: GLASS\n        C:\n          type: COMPASS\n      configuration: |-\n        | G |\n        |GCG|\n        | G |\n  result: # SerializableItemStack\n    type: COMPASS\n    displayName: Fancy Compass\n  # group: (optional) \n</code></pre></p> <p>Many other ingredient types exist such as shapeless, cooking, smoking, campfire, etc...</p>"},{"location":"idofront/serialization/#range-serializers","title":"Range serializers","text":"<p>Ex. <code>IntRangeSerializer</code>, all of them let you define a range in the form of <code>start..end</code> or <code>start to end</code>, ex <code>1..4</code>. Writing a single number like <code>1</code> results in a range equivalent to <code>1..1</code></p>"},{"location":"idofront/serialization/#duration","title":"Duration","text":"<p>Durations are serialized as a number followed by a timescale (ex <code>1s</code> for one second.) We also add a extension functions for durations in ticks: <code>1.ticks</code> and <code>Duration.inWholeTicks</code>.</p>"},{"location":"idofront/serialization/#supported-timescales","title":"Supported timescales:","text":"<pre><code>t: Ticks\ns: Seconds\nm: Minutes\nh: Hours\nd: Days\nw: Weeks\nmo: Months\n</code></pre>"},{"location":"idofront/gradle/SUMMARY/","title":"SUMMARY","text":"<ul> <li>plugins*</li> <li>catalog*</li> </ul>"},{"location":"idofront/gradle/catalog/","title":"Catalog","text":"<p>Gradle versions catalog for our plugins. <code>idofront-catalog-shaded</code> creates a packaged release that shades all these dependencies, which we use for our platform.</p> <p>Tip</p> <p>You can see all our defined versions in this file</p>"},{"location":"idofront/gradle/catalog/#importing-our-catalog","title":"Importing our catalog","text":"settings.gradle.kts <pre><code>dependencyResolutionManagement {\n    repositories {\n        maven(\"https://repo.mineinabyss.com/releases\")\n    }\n\n    versionCatalogs {\n        create(\"libs\") {\n            from(\"com.mineinabyss:catalog:&lt;version&gt;\")\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>Our catalog needs to be called <code>libs</code> for some of our plugins to work. If you use your own, we recommend loading it from a file and using the name <code>myLibs</code>.</p> build.gradle.kts <pre><code>dependencies {\n    compileOnly(libs.kotlinx.coroutines) // You will get autocomplete here!\n    implementation(libs.kotlinx.serialization)\n    // etc...\n}\n</code></pre>"},{"location":"idofront/gradle/catalog/#using-plugins-from-the-catalog","title":"Using plugins from the catalog","text":"<pre><code>@Suppress(\"DSL_SCOPE_VIOLATION\") // The IDE shows an error without this that doesn't actually cause problems\nplugins {\n    alias(libs.plugins...)\n}\n</code></pre>"},{"location":"idofront/gradle/catalog/#common-errors","title":"Common errors","text":"Plugin is already on the classpath <p>Error resolving plugin  <p>The request for this plugin could not be satisfied because the plugin is already on the classpath with an unknown version, so compatibility cannot be checked.</p> <p>This error happens when the plugin has been added by a parent project, since <code>alias</code> always tries to force a specific version, rather than just applying the plugin without version.</p> <p>To fix this, apply the plugin by name instead of using <code>alias</code>: <pre><code>plugins {\n    id(libs.plugins.x.y.z.get().pluginId)\n}\n</code></pre></p> <p>Expecting an expression</p> <p>You may get an error if no configuration comes after the <code>plugins</code> block. In this case add an empty run statement like so:</p> <pre><code>@Suppress(\"DSL_SCOPE_VIOLATION\")\nplugins { ... }\n\nrun {}\n</code></pre> LibrariesForLibs does not exist <p>org.gradle.api.UnknownDomainObjectException: Extension of type 'LibrariesForLibs' does not exist.</p> <p>It is likely that one of our conventions plugins tried to read versions from the catalog via the <code>libs</code> variable, but it either hasn't been registered, or has been registered under a different name. Follow the instructions in Using plugins from the catalog.</p>"},{"location":"idofront/gradle/plugins/","title":"Plugins","text":"<p>We use Gradle plugins to reuse configuration code (ex. to easily publish to our Maven repo.) Under the hood, we use the Kotlin DSL plugin to write our plugins concisely. These sorts of plugins are called conventions plugins.</p>"},{"location":"idofront/gradle/plugins/#usage","title":"Usage","text":"<p>Add the mineinabyss repo to <code>settings.gradle.kts</code> <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        // Add our repository to be able to access the plugin\n        maven(\"https://repo.mineinabyss.com/releases\")\n    }\n}\n</code></pre></p> <p>Apply a plugin in your <code>plugins { }</code> block. All of them start with <code>com.mineinabyss.conventions</code>. We recommend you use aliases as described in the catalog page to add our plugins. Apply them using <code>libs.plugins.idofront.x.y.z</code>.</p> Tip: If you don't wish to use plugin aliases <p>you can force a version for all plugins in <code>pluginManagement</code>, so you don't have to manually specify it each time: <pre><code>val idofrontConventions: String by settings\nresolutionStrategy {\n    eachPlugin {\n        if (requested.id.id.startsWith(\"com.mineinabyss.conventions\"))\n            useVersion(idofrontConventions)\n    }\n}\n</code></pre></p> <p>Be sure to specify the <code>idofrontConventions</code> version in <code>gradle.properties</code>:</p> <pre><code>idofrontConventions=&lt;x.y.z&gt;\n</code></pre> <p>See maven badge at the top for the latest version.</p> <p>Note</p> <p>Some conventions have extra config options that may be specified in your gradle.properties, they are explained further down.</p>"},{"location":"idofront/gradle/plugins/#available-plugins-and-options","title":"Available plugins and options","text":"<p>Note</p> <p>Plugins with configurable options use an extension with the same name as the plugin.</p>"},{"location":"idofront/gradle/plugins/#commineinabyssconventionsautoversion","title":"<code>com.mineinabyss.conventions.autoversion</code>","text":"<ul> <li>Appends version number from <code>RELEASE_VERSION</code> env variable to this project and subprojects. Used together with GitHub workflows for versioning.</li> </ul>"},{"location":"idofront/gradle/plugins/#commineinabyssconventionscopyjar","title":"<code>com.mineinabyss.conventions.copyjar</code>","text":"<ul> <li>Copies output artifact from <code>reobfJar</code> or <code>shadowJar</code> to a specified path marked in the <code>plugin_path</code> gradle property.</li> </ul>"},{"location":"idofront/gradle/plugins/#commineinabyssconventionskotlin","title":"<code>com.mineinabyss.conventions.kotlin</code>","text":"<ul> <li>Adds the Kotlin with a version shared across our organization.</li> </ul>"},{"location":"idofront/gradle/plugins/#commineinabyssconventionspapermc","title":"<code>com.mineinabyss.conventions.papermc</code>","text":"<ul> <li>Adds Paper dependencies, process resources task which replaces <code>${plugin_version}</code> in plugin.yml with the project's <code>version</code>. Adds copyJar plugin.</li> </ul>"},{"location":"idofront/gradle/plugins/#commineinabyssconventionsnms","title":"<code>com.mineinabyss.conventions.nms</code>","text":"<ul> <li>Sets up Paper's paperweight-userdev environment to automatically deobfuscate Minecraft source code.</li> </ul>"},{"location":"idofront/gradle/plugins/#commineinabyssconventionspublication","title":"<code>com.mineinabyss.conventions.publication</code>","text":"<ul> <li>Publishes to our maven repo with sources.</li> </ul>"},{"location":"idofront/gradle/plugins/#commineinabyssconventionstesting","title":"<code>com.mineinabyss.conventions.testing</code>","text":"<ul> <li>Uses jUnit platform for testing, adds kotest and mockk dependencies.</li> </ul>"},{"location":"idofront/util/","title":"Util","text":"<p>This project contains general utility functions for working with Bukkit classes.</p>"},{"location":"idofront/util/destructure/","title":"Destructure","text":"<p>Read about this Kotlin feature in Kotlin Docs - Destructuring Declarations</p> <p>Sometimes it is convenient to destructure an object into a number of variables, for example:</p> <pre><code>val (name, age) = person\n</code></pre> <p>In spigot, this pattern is very convenient for events, locations, and more. Idofront provides destructors for many direct subclasses of the <code>Event</code> class, allowing for the following:</p> <pre><code>fun onLeash(event: PlayerLeashEntityEvent) {\n    val (player, entity, leashHolder) = event\n}\n</code></pre> <p>And for locations or velocity:</p> <pre><code>val (x, y, z, world) = player.location\nval (vx, vy, vz) = player.velocity\n</code></pre> <p>Note: You do not need to specify all the components:</p> <pre><code>val (x) = player.velocity\n</code></pre> <p>Also of note, you need to import these extension functions for this to work, otherwise your IDE will show an error!</p>"},{"location":"idofront/util/plugin-startup-helpers/","title":"Plugin startup helpers","text":"<p>Here's an excerpt from another plugin using some helper methods in onEnable()</p> <pre><code>override fun onEnable() {\n    //services register one by one\n    service&lt;PlayerManager&gt;(PlayerManagerImpl())\n\n    //registering a list of event listeners\n    listeners(\n        MovementListener(),\n        PlayerListener()\n    )\n}\n</code></pre>"},{"location":"other-plugins/deeperworld/","title":"DeeperWorld","text":"<p> GitHub</p> <p>Note</p> <p>While we use this plugin on the Mine in Abyss server, we don't currently have any features for migrating configs. Please test things before updating!</p>"},{"location":"other-plugins/deeperworld/#installation","title":"Installation","text":"<ul> <li>Download DeeperWorld</li> <li>Download Idofront to provide all the dependencies we need</li> <li>Place the downloaded files into your <code>plugins</code> folder</li> <li>Set up your sections as explained in Defining Sections and start the server</li> </ul>"},{"location":"other-plugins/deeperworld/#extra-help","title":"Extra help","text":"<p>Please contact us in  <code>#plugin-dev</code>.</p>"},{"location":"other-plugins/deeperworld/SUMMARY/","title":"SUMMARY","text":"<ul> <li>About</li> <li>Defining Sections</li> </ul>"},{"location":"other-plugins/deeperworld/defining-sections/","title":"Defining Sections","text":""},{"location":"other-plugins/deeperworld/defining-sections/#creating-your-world","title":"Creating your world","text":"<p>It is up to you to create your sections however you like, with whatever overlap you like.</p>"},{"location":"other-plugins/deeperworld/defining-sections/#deeperworld-simply-needs-to-know","title":"DeeperWorld simply needs to know:","text":"<ul> <li>X-Z coordinates of two corners of each section.</li> <li>A reference location on one section, and where the corresponding location is in the next.</li> </ul>"},{"location":"other-plugins/deeperworld/defining-sections/#configuring","title":"Configuring","text":"<p>Open The plugin config file under <code>plugins/DeeperWorld/config.yml</code>.</p>"},{"location":"other-plugins/deeperworld/defining-sections/#what-youll-be-defining","title":"What you'll be defining:","text":"<p>As you can see in this masterpiece of an illustration, DeeperWorld automatically knows the overlap to synchronize just by defining two locations.</p> <p>There is also no restriction on differently sized regions. DeeperWorld will prevent teleports between two sections (red area) by bouncing players up/down if they would otherwise result in teleporting out of bounds.</p>"},{"location":"other-plugins/deeperworld/defining-sections/#example-config","title":"Example config","text":"<p>The plugin comes with an example config similar to the following:</p> <pre><code>sections:\n  - name: section1 #(1)\n    refTop: [0, 0, 0]\n    refBottom: [0, 16, 0] #(2)\n    region: [0, 0, 1000, 1000] #(3)\n    world: world\n  - name: section2\n    refTop: [1000, 240, 0] #(4)\n    refBottom: [2000, 16, 0] #(5)\n    region: [1000, 0, 2000, 1000]\n    world: world\n</code></pre> <ol> <li>Will show up when using /dw linfo</li> <li>A location in this section that corresponds to the lower section's <code>refTop</code></li> <li>Corners for this section (x1, z1, x2, z2)</li> <li>A location in this section that corresponds to the higher section's <code>refBottom</code></li> <li>Since this is the last section, the bottom won't matter</li> </ol>"},{"location":"server-configs/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Introduction</li> <li>Config types</li> </ul>"},{"location":"server-configs/config-types/","title":"Config types","text":"<p>We use several plugins across our configs, this page will try to link to the appropriate documentation and explain what each plugin does.</p>"},{"location":"server-configs/config-types/#geary","title":"Geary","text":"<p>Geary is our own plugin for creating custom items, blocks, and mob spawning. These configs follow a very similar pattern, you create prefab files under <code>pluigns/Geary/prefabs</code> which are just a list of \"components\" that describe what the prefab is. For example, the <code>set.item</code> component tells Geary a prefab is an item and should have a certain name, lore, custom model data, etc...</p> <p>Note that Geary mostly doesn't enforce a file structure. We try to keep files organized ourselves but there is no strict format to follow. Here are some example file locations under the <code>feat</code> folder:</p> Example Path Mob drop <code>items/plugins/Geary/prefabs/mineinabyss/items/drops/abyssal_snail</code> Mob spawns for layer 1 hostile mobs <code>mobs/plugins/Geary/spawns/mineinabyss/layer1/hostile.yml</code> Custom recipe for a vanilla item <code>items/plugins/Geary/prefabs/minecraft/recipes/book.yml</code> Bamboo chair furniture piece <code>blocks/plugins/Geary/prefabs/mineinabyss/blocks/furniture/bamboo/bamboo_chair.yml</code> Crate block <code>blocks/plugins/Geary/prefabs/mineinabyss/blocks/building/crate1.yml</code> Prefab that prevents allays from regenerating <code>mobs/plugins/Geary/prefabs/mineinabyss/mobs/custom_allay.yml</code> <p>Read the Geary docs here.</p>"},{"location":"server-configs/config-types/#mythicmobs","title":"MythicMobs","text":"<p>MythicMobs is a popular plugin for creating custom mobs with custom behaviours. It comes with many features, but we mostly just use it for creating our custom mobs and for its extensive \"skill\" system which lets us define fancy actions for mobs (ex. how the Silkfang shoots webs at players that stun them for a few seconds.)</p> <p>Example configs:</p> Example Path The mob file for a Silkfang <code>mobs/plugins/MythicMobs/mobs/mineinabyss/hostile/silkfang.yml</code> The skills used by a Silkfang <code>mobs/plugins/MythicMobs/skills/mineinabyss/hostile/silkfang.yml</code> <p>Read the MythicMobs docs here.</p>"},{"location":"server-configs/intro/","title":"Introduction","text":"<p>Our server configs are publicly visible on GitHub here. This guide will explain the structure we use for our configs and how to edit them in your browser. Further pages will explain the syntax for different plugins we use.</p>"},{"location":"server-configs/intro/#editing-configs-on-the-web","title":"Editing configs on the web","text":"<p>GitHub has a web editor built in which makes editing configs much easier. Create a GitHub account and sign in. Next, visit the server config page and press <code>.</code> to open the editor:</p> <p></p> <p>Example showing the GitHub web editor</p> <p></p> <p>Download the YAML extension from the left sidebar to get helpful code completion for the config files!</p>"},{"location":"server-configs/intro/#file-structure","title":"File structure","text":"<p>Most server configs are stored in the <code>feat</code> folder, these are split into separate features which different servers can choose to include, as defined in <code>keepup/configs.yml</code>. This means multiple features can dynamically put configs into the same folders, for example <code>feat/mobs</code> defines MythicMobs config files, but so does <code>feat/pets</code>, on startup both will have their configs combined the same folder.</p>"},{"location":"server-configs/intro/#uploading-your-changes","title":"Uploading your changes","text":"<p>On the bottom left of your editor, you'll see the current branch you're working on, in this case <code>develop</code>.</p> <p>You may click on it to create your own branch to work on changes (GitHub will ask if you want to \"fork\" this repo because you don't have permission to push to it directly, click yes and a copy will be made on your account).</p> <p>Whenever you start working on something, we recommend swapping back to the <code>develop</code> branch, clicking the sync icon next to it to get the latest changes, and then creating a new branch for your work, ex. <code>fix-mob-spawning</code>.</p> <p>The changes you make in your browser aren't automatically uploaded. To do so you need to \"commit\" them. Click on the source control button to the left and type a meaningful message describing what you changed.</p> <p></p> <p>Click <code>Commit &amp; Push</code> to upload the changes to your branch.</p>"},{"location":"server-configs/intro/#getting-your-changes-on-the-server","title":"Getting your changes on the server","text":"<p>You can make as many commits as you like, just try to keep messages meaningful. Once you're done, you can click the   icon near the top of the previous image to create a \"Pull request\".</p> <p></p> <p>Enter a title and description and choose what \"base\" branch you're requesting to place your changes into, this should almost always be <code>MineInAbyss/develop</code></p> <p>After making a pull request, you'll be able to see it back on the server config GitHub page, someone will review it and potentially leave comments, and you can continue to commit to the branch the request was made on to update the PR. Eventually it will get \"merged\" into the develop branch and your changes will be live on the development server, ready for the next major update.</p>"}]}